using CSharpSpeed;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using static System.Math;
using static InstrumentedLibrary.Maths;

namespace InstrumentedLibrary
{
    /// <summary>
    /// The intersection cubic Bezier cubic Bezier tests class.
    /// </summary>
    [DisplayName("Circle center from Three Points Tests")]
    [Description("Find the center of a circle that intersects three points.")]
    [Signature("public static double CircleCenterFromPoints(double aX, double aY, double bX, double bY, double cX, double cY)")]
    [SourceCodeLocationProvider]
    public static class IntersectionCubicBezierCubicBezierTests
    {
        /// <summary>
        /// Set of tests to run testing methods that calculate the Intersection of two Cubic Bézier curves.
        /// </summary>
        /// <returns>The <see cref="T:List{SpeedTester}"/>.</returns>
        [DisplayName(nameof(IntersectionQuadraticBezierQuadraticBezierTests))]
        public static List<SpeedTester> TestHarness()
        {
            var trials = 10000;
            var tests = new Dictionary<object[], TestCaseResults> {
                { new object[] { 1d, 5d, 10d, 15d, 20d, 15d, 30d, 5d, 1d, 5d, 10d, -5d, 20d, 10d, 30d, 5d, Epsilon }, new TestCaseResults("Cubic Bezier Cubic Bezier intersection.", trials, new Intersection(), double.Epsilon) },
            };

            var results = new List<SpeedTester>();
            foreach (var method in ReflectionHelper.ListStaticMethodsWithAttribute(MethodBase.GetCurrentMethod().DeclaringType, typeof(SourceCodeLocationProviderAttribute)))
            {
                var methodDescription = ((DescriptionAttribute)method.GetCustomAttribute(typeof(DescriptionAttribute)))?.Description;
                results.Add(new SpeedTester(method, methodDescription, tests));
            }
            return results;
        }

        /// <summary>
        /// Find the intersection between two cubic Bézier.
        /// </summary>
        /// <param name="a1X">The a1X.</param>
        /// <param name="a1Y">The a1Y.</param>
        /// <param name="a2X">The a2X.</param>
        /// <param name="a2Y">The a2Y.</param>
        /// <param name="a3X">The a3X.</param>
        /// <param name="a3Y">The a3Y.</param>
        /// <param name="a4X">The a4X.</param>
        /// <param name="a4Y">The a4Y.</param>
        /// <param name="b1X">The b1X.</param>
        /// <param name="b1Y">The b1Y.</param>
        /// <param name="b2X">The b2X.</param>
        /// <param name="b2Y">The b2Y.</param>
        /// <param name="b3X">The b3X.</param>
        /// <param name="b3Y">The b3Y.</param>
        /// <param name="b4X">The b4X.</param>
        /// <param name="b4Y">The b4Y.</param>
        /// <param name="epsilon">The <paramref name="epsilon"/> or minimal value to represent a change.</param>
        /// <returns>Returns an <see cref="Intersection"/> struct with a <see cref="Intersection.State"/>, and an array of <see cref="Point2D"/> structs containing any points of intersection found.</returns>
        [DisplayName("Cubic Bezier Segment Cubic Bezier Segment Intersection")]
        [Description("Find the intersection between two Cubic Bezier curves.")]
        [Acknowledgment("http://www.kevlindev.com/", "https://github.com/thelonious/kld-intersections/")]
        [SourceCodeLocationProvider]
        [DebuggerStepThrough]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Intersection CubicBezierSegmentCubicBezierSegmentIntersection(
            double a1X, double a1Y, double a2X, double a2Y, double a3X, double a3Y, double a4X, double a4Y,
            double b1X, double b1Y, double b2X, double b2Y, double b3X, double b3Y, double b4X, double b4Y,
            double epsilon = Epsilon)
            => CubicBezierSegmentCubicBezierSegmentIntersection(
                CubicBezierCoefficientsTests.CubicBezierCoefficients(a1X, a2X, a3X, a4X),
                CubicBezierCoefficientsTests.CubicBezierCoefficients(a1Y, a2Y, a3Y, a4Y),
                CubicBezierCoefficientsTests.CubicBezierCoefficients(b1X, b2X, b3X, b4X),
                CubicBezierCoefficientsTests.CubicBezierCoefficients(b1Y, b2Y, b3Y, b4Y),
                epsilon);

        /// <summary>
        /// Find the intersection between two cubic Bézier.
        /// </summary>
        /// <param name="xCurveA">The set of Polynomial Bézier Coefficients of the x coordinates of the first Bézier curve.</param>
        /// <param name="yCurveA">The set of Polynomial Bézier Coefficients of the y coordinates of the first Bézier curve.</param>
        /// <param name="xCurveB">The set of Polynomial Bézier Coefficients of the x coordinates of the second Bézier curve.</param>
        /// <param name="yCurveB">The set of Polynomial Bézier Coefficients of the y coordinates of the second Bézier curve.</param>
        /// <param name="epsilon">The <paramref name="epsilon"/> or minimal value to represent a change.</param>
        /// <returns>Returns an <see cref="Intersection"/> struct with a <see cref="Intersection.State"/>, and an array of <see cref="Point2D"/> structs containing any points of intersection found.</returns>
        /// <acknowledgment>
        /// This is a rewrite of a method ported from: http://www.kevlindev.com/ also found at: https://github.com/thelonious/kld-intersections/
        /// </acknowledgment>
        //[DebuggerStepThrough]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Intersection CubicBezierSegmentCubicBezierSegmentIntersection(
            Polynomial xCurveA, Polynomial yCurveA,
            Polynomial xCurveB, Polynomial yCurveB,
            double epsilon = Epsilon)
        {
            // Initialize the intersection.
            var result = new Intersection(IntersectionState.NoIntersection);

            // ToDo: The tolerance is off by too much. Need to find the error.
            var tolerance = 4194303 * epsilon;

            // Bezout
            var c10x2 = xCurveA[3] * xCurveA[3];
            var c10x3 = xCurveA[3] * xCurveA[3] * xCurveA[3];
            var c10y2 = yCurveA[3] * yCurveA[3];
            var c10y3 = yCurveA[3] * yCurveA[3] * yCurveA[3];

            var c11x2 = xCurveA[2] * xCurveA[2];
            var c11x3 = xCurveA[2] * xCurveA[2] * xCurveA[2];
            var c11y2 = yCurveA[2] * yCurveA[2];
            var c11y3 = yCurveA[2] * yCurveA[2] * yCurveA[2];

            var c12x2 = xCurveA[1] * xCurveA[1];
            var c12x3 = xCurveA[1] * xCurveA[1] * xCurveA[1];
            var c12y2 = yCurveA[1] * yCurveA[1];
            var c12y3 = yCurveA[1] * yCurveA[1] * yCurveA[1];

            var c13x2 = xCurveA[0] * xCurveA[0];
            var c13x3 = xCurveA[0] * xCurveA[0] * xCurveA[0];
            var c13y2 = yCurveA[0] * yCurveA[0];
            var c13y3 = yCurveA[0] * yCurveA[0] * yCurveA[0];

            var c20x2 = xCurveB[3] * xCurveB[3];
            var c20x3 = xCurveB[3] * xCurveB[3] * xCurveB[3];
            var c20y2 = yCurveB[3] * yCurveB[3];
            var c20y3 = yCurveB[3] * yCurveB[3] * yCurveB[3];

            var c21x2 = xCurveB[2] * xCurveB[2];
            var c21x3 = xCurveB[2] * xCurveB[2] * xCurveB[2];
            var c21y2 = yCurveB[2] * yCurveB[2];

            var c22x2 = xCurveB[1] * xCurveB[1];
            var c22x3 = xCurveB[1] * xCurveB[1] * xCurveB[1];
            var c22y2 = yCurveB[1] * yCurveB[1];

            var c23x2 = xCurveB[0] * xCurveB[0];
            var c23x3 = xCurveB[0] * xCurveB[0] * xCurveB[0];
            var c23y2 = yCurveB[0] * yCurveB[0];
            var c23y3 = yCurveB[0] * yCurveB[0] * yCurveB[0];

            // Find the roots of the determinants of the polynomial that represents the intersections.
            var roots = new Polynomial(
                /* x⁹ */ -c13x3 * c23y3 + c13y3 * c23x3 - 3 * xCurveA[0] * c13y2 * c23x2 * yCurveB[0] + 3 * c13x2 * yCurveA[0] * xCurveB[0] * c23y2,
                /* x⁸ */ -6 * xCurveA[0] * xCurveB[1] * c13y2 * xCurveB[0] * yCurveB[0] + 6 * c13x2 * yCurveA[0] * yCurveB[1] * xCurveB[0] * yCurveB[0] + 3 * xCurveB[1] * c13y3 * c23x2 - 3 * c13x3 * yCurveB[1] * c23y2 - 3 * xCurveA[0] * c13y2 * yCurveB[1] * c23x2 + 3 * c13x2 * xCurveB[1] * yCurveA[0] * c23y2,
                /* x⁷ */ -6 * xCurveB[2] * xCurveA[0] * c13y2 * xCurveB[0] * yCurveB[0] - 6 * xCurveA[0] * xCurveB[1] * c13y2 * yCurveB[1] * xCurveB[0] + 6 * c13x2 * xCurveB[1] * yCurveA[0] * yCurveB[1] * yCurveB[0] + 3 * xCurveB[2] * c13y3 * c23x2 + 3 * c22x2 * c13y3 * xCurveB[0] + 3 * xCurveB[2] * c13x2 * yCurveA[0] * c23y2 - 3 * xCurveA[0] * yCurveB[2] * c13y2 * c23x2 - 3 * xCurveA[0] * c22x2 * c13y2 * yCurveB[0] + c13x2 * yCurveA[0] * xCurveB[0] * (6 * yCurveB[2] * yCurveB[0] + 3 * c22y2) + c13x3 * (-yCurveB[2] * c23y2 - 2 * c22y2 * yCurveB[0] - yCurveB[0] * (2 * yCurveB[2] * yCurveB[0] + c22y2)),
                /* x⁶ */ xCurveA[2] * yCurveA[1] * xCurveA[0] * yCurveA[0] * xCurveB[0] * yCurveB[0] - yCurveA[2] * xCurveA[1] * xCurveA[0] * yCurveA[0] * xCurveB[0] * yCurveB[0] + 6 * xCurveB[2] * xCurveB[1] * c13y3 * xCurveB[0] + 3 * xCurveA[2] * xCurveA[1] * xCurveA[0] * yCurveA[0] * c23y2 + 6 * xCurveA[3] * xCurveA[0] * c13y2 * xCurveB[0] * yCurveB[0] - 3 * xCurveA[2] * xCurveA[1] * c13y2 * xCurveB[0] * yCurveB[0] - 3 * yCurveA[2] * yCurveA[1] * xCurveA[0] * yCurveA[0] * c23x2 - 6 * yCurveA[3] * c13x2 * yCurveA[0] * xCurveB[0] * yCurveB[0] - 6 * xCurveB[3] * xCurveA[0] * c13y2 * xCurveB[0] * yCurveB[0] + 3 * yCurveA[2] * yCurveA[1] * c13x2 * xCurveB[0] * yCurveB[0] - 2 * xCurveA[1] * c12y2 * xCurveA[0] * xCurveB[0] * yCurveB[0] - 6 * xCurveB[2] * xCurveA[0] * xCurveB[1] * c13y2 * yCurveB[0] - 6 * xCurveB[2] * xCurveA[0] * c13y2 * yCurveB[1] * xCurveB[0] - 6 * xCurveA[0] * yCurveB[2] * xCurveB[1] * c13y2 * xCurveB[0] + 6 * xCurveB[2] * c13x2 * yCurveA[0] * yCurveB[1] * yCurveB[0] + 2 * c12x2 * yCurveA[1] * yCurveA[0] * xCurveB[0] * yCurveB[0] + c22x3 * c13y3 - 3 * xCurveA[3] * c13y3 * c23x2 + 3 * yCurveA[3] * c13x3 * c23y2 + 3 * xCurveB[3] * c13y3 * c23x2 + c12y3 * xCurveA[0] * c23x2 - c12x3 * yCurveA[0] * c23y2 - 3 * xCurveA[3] * c13x2 * yCurveA[0] * c23y2 + 3 * yCurveA[3] * xCurveA[0] * c13y2 * c23x2 - 2 * xCurveA[2] * yCurveA[1] * c13x2 * c23y2 + xCurveA[2] * yCurveA[1] * c13y2 * c23x2 - yCurveA[2] * xCurveA[1] * c13x2 * c23y2 + 2 * yCurveA[2] * xCurveA[1] * c13y2 * c23x2 + 3 * xCurveB[3] * c13x2 * yCurveA[0] * c23y2 - xCurveA[1] * c12y2 * yCurveA[0] * c23x2 - 3 * yCurveB[3] * xCurveA[0] * c13y2 * c23x2 + c12x2 * yCurveA[1] * xCurveA[0] * c23y2 - 3 * xCurveA[0] * c22x2 * c13y2 * yCurveB[1] + c13x2 * yCurveA[0] * xCurveB[0] * (6 * yCurveB[3] * yCurveB[0] + 6 * yCurveB[2] * yCurveB[1]) + c13x2 * xCurveB[1] * yCurveA[0] * (6 * yCurveB[2] * yCurveB[0] + 3 * c22y2) + c13x3 * (-2 * yCurveB[2] * yCurveB[1] * yCurveB[0] - yCurveB[3] * c23y2 - yCurveB[1] * (2 * yCurveB[2] * yCurveB[0] + c22y2) - yCurveB[0] * (2 * yCurveB[3] * yCurveB[0] + 2 * yCurveB[2] * yCurveB[1])),
                /* x⁵ */ 6 * xCurveA[2] * xCurveA[1] * xCurveA[0] * yCurveA[0] * yCurveB[1] * yCurveB[0] + xCurveA[2] * yCurveA[1] * xCurveA[0] * xCurveB[1] * yCurveA[0] * yCurveB[0] + xCurveA[2] * yCurveA[1] * xCurveA[0] * yCurveA[0] * yCurveB[1] * xCurveB[0] - yCurveA[2] * xCurveA[1] * xCurveA[0] * xCurveB[1] * yCurveA[0] * yCurveB[0] - yCurveA[2] * xCurveA[1] * xCurveA[0] * yCurveA[0] * yCurveB[1] * xCurveB[0] - 6 * yCurveA[2] * yCurveA[1] * xCurveA[0] * xCurveB[1] * yCurveA[0] * xCurveB[0] - 6 * xCurveA[3] * xCurveB[1] * c13y3 * xCurveB[0] + 6 * xCurveB[3] * xCurveB[1] * c13y3 * xCurveB[0] + 6 * yCurveA[3] * c13x3 * yCurveB[1] * yCurveB[0] + 2 * c12y3 * xCurveA[0] * xCurveB[1] * xCurveB[0] - 2 * c12x3 * yCurveA[0] * yCurveB[1] * yCurveB[0] + 6 * xCurveA[3] * xCurveA[0] * xCurveB[1] * c13y2 * yCurveB[0] + 6 * xCurveA[3] * xCurveA[0] * c13y2 * yCurveB[1] * xCurveB[0] + 6 * yCurveA[3] * xCurveA[0] * xCurveB[1] * c13y2 * xCurveB[0] - 3 * xCurveA[2] * xCurveA[1] * xCurveB[1] * c13y2 * yCurveB[0] - 3 * xCurveA[2] * xCurveA[1] * c13y2 * yCurveB[1] * xCurveB[0] + 2 * xCurveA[2] * yCurveA[1] * xCurveB[1] * c13y2 * xCurveB[0] + 4 * yCurveA[2] * xCurveA[1] * xCurveB[1] * c13y2 * xCurveB[0] - 6 * xCurveA[3] * c13x2 * yCurveA[0] * yCurveB[1] * yCurveB[0] - 6 * yCurveA[3] * c13x2 * xCurveB[1] * yCurveA[0] * yCurveB[0] - 6 * yCurveA[3] * c13x2 * yCurveA[0] * yCurveB[1] * xCurveB[0] - 4 * xCurveA[2] * yCurveA[1] * c13x2 * yCurveB[1] * yCurveB[0] - 6 * xCurveB[3] * xCurveA[0] * xCurveB[1] * c13y2 * yCurveB[0] - 6 * xCurveB[3] * xCurveA[0] * c13y2 * yCurveB[1] * xCurveB[0] - 2 * yCurveA[2] * xCurveA[1] * c13x2 * yCurveB[1] * yCurveB[0] + 3 * yCurveA[2] * yCurveA[1] * c13x2 * xCurveB[1] * yCurveB[0] + 3 * yCurveA[2] * yCurveA[1] * c13x2 * yCurveB[1] * xCurveB[0] - 2 * xCurveA[1] * c12y2 * xCurveA[0] * xCurveB[1] * yCurveB[0] - 2 * xCurveA[1] * c12y2 * xCurveA[0] * yCurveB[1] * xCurveB[0] - 2 * xCurveA[1] * c12y2 * xCurveB[1] * yCurveA[0] * xCurveB[0] - 6 * yCurveB[3] * xCurveA[0] * xCurveB[1] * c13y2 * xCurveB[0] - 6 * xCurveB[2] * xCurveA[0] * yCurveB[2] * c13y2 * xCurveB[0] - 6 * xCurveB[2] * xCurveA[0] * xCurveB[1] * c13y2 * yCurveB[1] + 6 * xCurveB[3] * c13x2 * yCurveA[0] * yCurveB[1] * yCurveB[0] + 2 * c12x2 * yCurveA[1] * xCurveA[0] * yCurveB[1] * yCurveB[0] + 2 * c12x2 * yCurveA[1] * xCurveB[1] * yCurveA[0] * yCurveB[0] + 2 * c12x2 * yCurveA[1] * yCurveA[0] * yCurveB[1] * xCurveB[0] + 3 * xCurveB[2] * c22x2 * c13y3 + 3 * c21x2 * c13y3 * xCurveB[0] - 3 * xCurveA[0] * yCurveB[2] * c22x2 * c13y2 - 3 * c21x2 * xCurveA[0] * c13y2 * yCurveB[0] + c13x2 * xCurveB[1] * yCurveA[0] * (6 * yCurveB[3] * yCurveB[0] + 6 * yCurveB[2] * yCurveB[1]) + c13x2 * yCurveA[0] * xCurveB[0] * (6 * yCurveB[3] * yCurveB[1] + 3 * c21y2) + xCurveB[2] * c13x2 * yCurveA[0] * (6 * yCurveB[2] * yCurveB[0] + 3 * c22y2) + c13x3 * (-2 * yCurveB[3] * yCurveB[1] * yCurveB[0] - yCurveB[0] * (2 * yCurveB[3] * yCurveB[1] + c21y2) - yCurveB[2] * (2 * yCurveB[2] * yCurveB[0] + c22y2) - yCurveB[1] * (2 * yCurveB[3] * yCurveB[0] + 2 * yCurveB[2] * yCurveB[1])),
                /* x⁴ */ xCurveA[2] * xCurveB[2] * yCurveA[1] * xCurveA[0] * yCurveA[0] * yCurveB[0] + xCurveA[2] * yCurveA[1] * xCurveA[0] * yCurveB[2] * yCurveA[0] * xCurveB[0] + xCurveA[2] * yCurveA[1] * xCurveA[0] * xCurveB[1] * yCurveA[0] * yCurveB[1] - yCurveA[2] * xCurveA[1] * xCurveB[2] * xCurveA[0] * yCurveA[0] * yCurveB[0] - yCurveA[2] * xCurveA[1] * xCurveA[0] * yCurveB[2] * yCurveA[0] * xCurveB[0] - yCurveA[2] * xCurveA[1] * xCurveA[0] * xCurveB[1] * yCurveA[0] * yCurveB[1] - 6 * yCurveA[2] * xCurveB[2] * yCurveA[1] * xCurveA[0] * yCurveA[0] * xCurveB[0] - 6 * xCurveA[3] * xCurveB[2] * c13y3 * xCurveB[0] + 6 * xCurveB[3] * xCurveB[2] * c13y3 * xCurveB[0] + 2 * xCurveB[2] * c12y3 * xCurveA[0] * xCurveB[0] + 6 * xCurveA[3] * xCurveB[2] * xCurveA[0] * c13y2 * yCurveB[0] + 6 * xCurveA[3] * xCurveA[0] * yCurveB[2] * c13y2 * xCurveB[0] + 6 * xCurveA[3] * xCurveA[0] * xCurveB[1] * c13y2 * yCurveB[1] + 6 * yCurveA[3] * xCurveB[2] * xCurveA[0] * c13y2 * xCurveB[0] - 3 * xCurveA[2] * xCurveA[1] * xCurveB[2] * c13y2 * yCurveB[0] - 3 * xCurveA[2] * xCurveA[1] * yCurveB[2] * c13y2 * xCurveB[0] - 3 * xCurveA[2] * xCurveA[1] * xCurveB[1] * c13y2 * yCurveB[1] + 2 * xCurveA[2] * xCurveB[2] * yCurveA[1] * c13y2 * xCurveB[0] + 4 * yCurveA[2] * xCurveA[1] * xCurveB[2] * c13y2 * xCurveB[0] - 6 * yCurveA[3] * xCurveB[2] * c13x2 * yCurveA[0] * yCurveB[0] - 6 * yCurveA[3] * c13x2 * yCurveB[2] * yCurveA[0] * xCurveB[0] - 6 * yCurveA[3] * c13x2 * xCurveB[1] * yCurveA[0] * yCurveB[1] - 6 * xCurveB[3] * xCurveB[2] * xCurveA[0] * c13y2 * yCurveB[0] - 6 * xCurveB[3] * xCurveA[0] * yCurveB[2] * c13y2 * xCurveB[0] - 6 * xCurveB[3] * xCurveA[0] * xCurveB[1] * c13y2 * yCurveB[1] + 3 * yCurveA[2] * xCurveB[2] * yCurveA[1] * c13x2 * yCurveB[0] - 3 * yCurveA[2] * yCurveA[1] * xCurveA[0] * c22x2 * yCurveA[0] + 3 * yCurveA[2] * yCurveA[1] * c13x2 * yCurveB[2] * xCurveB[0] + 3 * yCurveA[2] * yCurveA[1] * c13x2 * xCurveB[1] * yCurveB[1] - 2 * xCurveA[1] * xCurveB[2] * c12y2 * xCurveA[0] * yCurveB[0] - 2 * xCurveA[1] * xCurveB[2] * c12y2 * yCurveA[0] * xCurveB[0] - 2 * xCurveA[1] * c12y2 * xCurveA[0] * yCurveB[2] * xCurveB[0] - 2 * xCurveA[1] * c12y2 * xCurveA[0] * xCurveB[1] * yCurveB[1] - 6 * yCurveB[3] * xCurveB[2] * xCurveA[0] * c13y2 * xCurveB[0] - 6 * xCurveB[2] * xCurveA[0] * yCurveB[2] * xCurveB[1] * c13y2 + 6 * yCurveB[3] * c13x2 * yCurveB[2] * yCurveA[0] * xCurveB[0] + 2 * c12x2 * xCurveB[2] * yCurveA[1] * yCurveA[0] * yCurveB[0] + 2 * c12x2 * yCurveA[1] * yCurveB[2] * yCurveA[0] * xCurveB[0] + 2 * c12x2 * yCurveA[1] * xCurveB[1] * yCurveA[0] * yCurveB[1] - 3 * xCurveA[3] * c22x2 * c13y3 + 3 * xCurveB[3] * c22x2 * c13y3 + 3 * c21x2 * xCurveB[1] * c13y3 + c12y3 * xCurveA[0] * c22x2 + 3 * yCurveA[3] * xCurveA[0] * c22x2 * c13y2 + xCurveA[2] * yCurveA[1] * c22x2 * c13y2 + 2 * yCurveA[2] * xCurveA[1] * c22x2 * c13y2 - xCurveA[1] * c12y2 * c22x2 * yCurveA[0] - 3 * yCurveB[3] * xCurveA[0] * c22x2 * c13y2 - 3 * c21x2 * xCurveA[0] * c13y2 * yCurveB[1] + c12x2 * yCurveA[1] * xCurveA[0] * (2 * yCurveB[2] * yCurveB[0] + c22y2) + xCurveA[2] * xCurveA[1] * xCurveA[0] * yCurveA[0] * (6 * yCurveB[2] * yCurveB[0] + 3 * c22y2) + xCurveB[2] * c13x2 * yCurveA[0] * (6 * yCurveB[3] * yCurveB[0] + 6 * yCurveB[2] * yCurveB[1]) + c12x3 * yCurveA[0] * (-2 * yCurveB[2] * yCurveB[0] - c22y2) + yCurveA[3] * c13x3 * (6 * yCurveB[2] * yCurveB[0] + 3 * c22y2) + yCurveA[2] * xCurveA[1] * c13x2 * (-2 * yCurveB[2] * yCurveB[0] - c22y2) + xCurveA[2] * yCurveA[1] * c13x2 * (-4 * yCurveB[2] * yCurveB[0] - 2 * c22y2) + xCurveA[3] * c13x2 * yCurveA[0] * (-6 * yCurveB[2] * yCurveB[0] - 3 * c22y2) + c13x2 * xCurveB[1] * yCurveA[0] * (6 * yCurveB[3] * yCurveB[1] + 3 * c21y2) + xCurveB[3] * c13x2 * yCurveA[0] * (6 * yCurveB[2] * yCurveB[0] + 3 * c22y2) + c13x3 * (-2 * yCurveB[3] * yCurveB[2] * yCurveB[0] - yCurveB[1] * (2 * yCurveB[3] * yCurveB[1] + c21y2) - yCurveB[3] * (2 * yCurveB[2] * yCurveB[0] + c22y2) - yCurveB[2] * (2 * yCurveB[3] * yCurveB[0] + 2 * yCurveB[2] * yCurveB[1])),
                /* x³ */ -xCurveA[3] * xCurveA[2] * yCurveA[1] * xCurveA[0] * yCurveA[0] * yCurveB[0] + xCurveA[3] * yCurveA[2] * xCurveA[1] * xCurveA[0] * yCurveA[0] * yCurveB[0] + 6 * xCurveA[3] * yCurveA[2] * yCurveA[1] * xCurveA[0] * yCurveA[0] * xCurveB[0] - 6 * yCurveA[3] * xCurveA[2] * xCurveA[1] * xCurveA[0] * yCurveA[0] * yCurveB[0] - yCurveA[3] * xCurveA[2] * yCurveA[1] * xCurveA[0] * yCurveA[0] * xCurveB[0] + yCurveA[3] * yCurveA[2] * xCurveA[1] * xCurveA[0] * yCurveA[0] * xCurveB[0] + xCurveA[2] * yCurveA[2] * xCurveA[1] * yCurveA[1] * xCurveA[0] * yCurveB[0] - xCurveA[2] * yCurveA[2] * xCurveA[1] * yCurveA[1] * yCurveA[0] * xCurveB[0] + xCurveA[2] * xCurveB[3] * yCurveA[1] * xCurveA[0] * yCurveA[0] * yCurveB[0] + xCurveA[2] * yCurveB[3] * yCurveA[1] * xCurveA[0] * yCurveA[0] * xCurveB[0] + xCurveA[2] * xCurveB[2] * yCurveA[1] * xCurveA[0] * yCurveA[0] * yCurveB[1] + xCurveA[2] * yCurveA[1] * xCurveA[0] * yCurveB[2] * xCurveB[1] * yCurveA[0] - xCurveB[3] * yCurveA[2] * xCurveA[1] * xCurveA[0] * yCurveA[0] * yCurveB[0] - 6 * xCurveB[3] * yCurveA[2] * yCurveA[1] * xCurveA[0] * yCurveA[0] * xCurveB[0] - yCurveA[2] * xCurveA[1] * yCurveB[3] * xCurveA[0] * yCurveA[0] * xCurveB[0] - yCurveA[2] * xCurveA[1] * xCurveB[2] * xCurveA[0] * yCurveA[0] * yCurveB[1] - yCurveA[2] * xCurveA[1] * xCurveA[0] * yCurveB[2] * xCurveB[1] * yCurveA[0] - 6 * yCurveA[2] * xCurveB[2] * yCurveA[1] * xCurveA[0] * xCurveB[1] * yCurveA[0] - 6 * xCurveA[3] * xCurveB[3] * c13y3 * xCurveB[0] - 6 * xCurveA[3] * xCurveB[2] * xCurveB[1] * c13y3 - 2 * xCurveA[3] * c12y3 * xCurveA[0] * xCurveB[0] + 6 * xCurveB[3] * xCurveB[2] * xCurveB[1] * c13y3 + 2 * xCurveB[3] * c12y3 * xCurveA[0] * xCurveB[0] + 2 * xCurveB[2] * c12y3 * xCurveA[0] * xCurveB[1] + 2 * yCurveA[3] * c12x3 * yCurveA[0] * yCurveB[0] - 6 * xCurveA[3] * yCurveA[3] * xCurveA[0] * c13y2 * xCurveB[0] + 3 * xCurveA[3] * xCurveA[2] * xCurveA[1] * c13y2 * yCurveB[0] - 2 * xCurveA[3] * xCurveA[2] * yCurveA[1] * c13y2 * xCurveB[0] - 4 * xCurveA[3] * yCurveA[2] * xCurveA[1] * c13y2 * xCurveB[0] + 3 * yCurveA[3] * xCurveA[2] * xCurveA[1] * c13y2 * xCurveB[0] + 6 * xCurveA[3] * yCurveA[3] * c13x2 * yCurveA[0] * yCurveB[0] + 6 * xCurveA[3] * xCurveB[3] * xCurveA[0] * c13y2 * yCurveB[0] - 3 * xCurveA[3] * yCurveA[2] * yCurveA[1] * c13x2 * yCurveB[0] + 2 * xCurveA[3] * xCurveA[1] * c12y2 * xCurveA[0] * yCurveB[0] + 2 * xCurveA[3] * xCurveA[1] * c12y2 * yCurveA[0] * xCurveB[0] + 6 * xCurveA[3] * yCurveB[3] * xCurveA[0] * c13y2 * xCurveB[0] + 6 * xCurveA[3] * xCurveB[2] * xCurveA[0] * c13y2 * yCurveB[1] + 6 * xCurveA[3] * xCurveA[0] * yCurveB[2] * xCurveB[1] * c13y2 + 4 * yCurveA[3] * xCurveA[2] * yCurveA[1] * c13x2 * yCurveB[0] + 6 * yCurveA[3] * xCurveB[3] * xCurveA[0] * c13y2 * xCurveB[0] + 2 * yCurveA[3] * yCurveA[2] * xCurveA[1] * c13x2 * yCurveB[0] - 3 * yCurveA[3] * yCurveA[2] * yCurveA[1] * c13x2 * xCurveB[0] + 2 * yCurveA[3] * xCurveA[1] * c12y2 * xCurveA[0] * xCurveB[0] + 6 * yCurveA[3] * xCurveB[2] * xCurveA[0] * xCurveB[1] * c13y2 - 3 * xCurveA[2] * xCurveB[3] * xCurveA[1] * c13y2 * yCurveB[0] + 2 * xCurveA[2] * xCurveB[3] * yCurveA[1] * c13y2 * xCurveB[0] + xCurveA[2] * yCurveA[2] * c12y2 * xCurveA[0] * xCurveB[0] - 3 * xCurveA[2] * xCurveA[1] * yCurveB[3] * c13y2 * xCurveB[0] - 3 * xCurveA[2] * xCurveA[1] * xCurveB[2] * c13y2 * yCurveB[1] - 3 * xCurveA[2] * xCurveA[1] * yCurveB[2] * xCurveB[1] * c13y2 + 2 * xCurveA[2] * xCurveB[2] * yCurveA[1] * xCurveB[1] * c13y2 + 4 * xCurveB[3] * yCurveA[2] * xCurveA[1] * c13y2 * xCurveB[0] + 4 * yCurveA[2] * xCurveA[1] * xCurveB[2] * xCurveB[1] * c13y2 - 2 * xCurveA[3] * c12x2 * yCurveA[1] * yCurveA[0] * yCurveB[0] - 6 * yCurveA[3] * xCurveB[3] * c13x2 * yCurveA[0] * yCurveB[0] - 6 * yCurveA[3] * yCurveB[3] * c13x2 * yCurveA[0] * xCurveB[0] - 6 * yCurveA[3] * xCurveB[2] * c13x2 * yCurveA[0] * yCurveB[1] - 2 * yCurveA[3] * c12x2 * yCurveA[1] * xCurveA[0] * yCurveB[0] - 2 * yCurveA[3] * c12x2 * yCurveA[1] * yCurveA[0] * xCurveB[0] - 6 * yCurveA[3] * c13x2 * yCurveB[2] * xCurveB[1] * yCurveA[0] - xCurveA[2] * yCurveA[2] * c12x2 * yCurveA[0] * yCurveB[0] - 2 * xCurveA[2] * c11y2 * xCurveA[0] * yCurveA[0] * xCurveB[0] + 3 * xCurveB[3] * yCurveA[2] * yCurveA[1] * c13x2 * yCurveB[0] - 2 * xCurveB[3] * xCurveA[1] * c12y2 * xCurveA[0] * yCurveB[0] - 2 * xCurveB[3] * xCurveA[1] * c12y2 * yCurveA[0] * xCurveB[0] - 6 * xCurveB[3] * yCurveB[3] * xCurveA[0] * c13y2 * xCurveB[0] - 6 * xCurveB[3] * xCurveB[2] * xCurveA[0] * c13y2 * yCurveB[1] - 6 * xCurveB[3] * xCurveA[0] * yCurveB[2] * xCurveB[1] * c13y2 + 3 * yCurveA[2] * yCurveB[3] * yCurveA[1] * c13x2 * xCurveB[0] + 3 * yCurveA[2] * xCurveB[2] * yCurveA[1] * c13x2 * yCurveB[1] + 3 * yCurveA[2] * yCurveA[1] * c13x2 * yCurveB[2] * xCurveB[1] - 2 * xCurveA[1] * yCurveB[3] * c12y2 * xCurveA[0] * xCurveB[0] - 2 * xCurveA[1] * xCurveB[2] * c12y2 * xCurveA[0] * yCurveB[1] - 2 * xCurveA[1] * xCurveB[2] * c12y2 * xCurveB[1] * yCurveA[0] - 2 * xCurveA[1] * c12y2 * xCurveA[0] * yCurveB[2] * xCurveB[1] - 6 * yCurveB[3] * xCurveB[2] * xCurveA[0] * xCurveB[1] * c13y2 - c11y2 * xCurveA[1] * yCurveA[1] * xCurveA[0] * xCurveB[0] + 2 * xCurveB[3] * c12x2 * yCurveA[1] * yCurveA[0] * yCurveB[0] + 6 * yCurveB[3] * c13x2 * yCurveB[2] * xCurveB[1] * yCurveA[0] + 2 * c11x2 * yCurveA[2] * xCurveA[0] * yCurveA[0] * yCurveB[0] + c11x2 * xCurveA[1] * yCurveA[1] * yCurveA[0] * yCurveB[0] + 2 * c12x2 * yCurveB[3] * yCurveA[1] * yCurveA[0] * xCurveB[0] + 2 * c12x2 * xCurveB[2] * yCurveA[1] * yCurveA[0] * yCurveB[1] + 2 * c12x2 * yCurveA[1] * yCurveB[2] * xCurveB[1] * yCurveA[0] + c21x3 * c13y3 + 3 * c10x2 * c13y3 * xCurveB[0] - 3 * c10y2 * c13x3 * yCurveB[0] + 3 * c20x2 * c13y3 * xCurveB[0] + c11y3 * c13x2 * xCurveB[0] - c11x3 * c13y2 * yCurveB[0] - xCurveA[2] * c11y2 * c13x2 * yCurveB[0] + c11x2 * yCurveA[2] * c13y2 * xCurveB[0] - 3 * c10x2 * xCurveA[0] * c13y2 * yCurveB[0] + 3 * c10y2 * c13x2 * yCurveA[0] * xCurveB[0] - c11x2 * c12y2 * xCurveA[0] * yCurveB[0] + c11y2 * c12x2 * yCurveA[0] * xCurveB[0] - 3 * c21x2 * xCurveA[0] * yCurveB[2] * c13y2 - 3 * c20x2 * xCurveA[0] * c13y2 * yCurveB[0] + 3 * c20y2 * c13x2 * yCurveA[0] * xCurveB[0] + xCurveA[2] * xCurveA[1] * xCurveA[0] * yCurveA[0] * (6 * yCurveB[3] * yCurveB[0] + 6 * yCurveB[2] * yCurveB[1]) + c12x3 * yCurveA[0] * (-2 * yCurveB[3] * yCurveB[0] - 2 * yCurveB[2] * yCurveB[1]) + yCurveA[3] * c13x3 * (6 * yCurveB[3] * yCurveB[0] + 6 * yCurveB[2] * yCurveB[1]) + yCurveA[2] * xCurveA[1] * c13x2 * (-2 * yCurveB[3] * yCurveB[0] - 2 * yCurveB[2] * yCurveB[1]) + c12x2 * yCurveA[1] * xCurveA[0] * (2 * yCurveB[3] * yCurveB[0] + 2 * yCurveB[2] * yCurveB[1]) + xCurveA[2] * yCurveA[1] * c13x2 * (-4 * yCurveB[3] * yCurveB[0] - 4 * yCurveB[2] * yCurveB[1]) + xCurveA[3] * c13x2 * yCurveA[0] * (-6 * yCurveB[3] * yCurveB[0] - 6 * yCurveB[2] * yCurveB[1]) + xCurveB[3] * c13x2 * yCurveA[0] * (6 * yCurveB[3] * yCurveB[0] + 6 * yCurveB[2] * yCurveB[1]) + xCurveB[2] * c13x2 * yCurveA[0] * (6 * yCurveB[3] * yCurveB[1] + 3 * c21y2) + c13x3 * (-2 * yCurveB[3] * yCurveB[2] * yCurveB[1] - c20y2 * yCurveB[0] - yCurveB[2] * (2 * yCurveB[3] * yCurveB[1] + c21y2) - yCurveB[3] * (2 * yCurveB[3] * yCurveB[0] + 2 * yCurveB[2] * yCurveB[1])),
                /* x² */ -xCurveA[3] * xCurveA[2] * yCurveA[1] * xCurveA[0] * yCurveA[0] * yCurveB[1] + xCurveA[3] * yCurveA[2] * xCurveA[1] * xCurveA[0] * yCurveA[0] * yCurveB[1] + 6 * xCurveA[3] * yCurveA[2] * yCurveA[1] * xCurveA[0] * xCurveB[1] * yCurveA[0] - 6 * yCurveA[3] * xCurveA[2] * xCurveA[1] * xCurveA[0] * yCurveA[0] * yCurveB[1] - yCurveA[3] * xCurveA[2] * yCurveA[1] * xCurveA[0] * xCurveB[1] * yCurveA[0] + yCurveA[3] * yCurveA[2] * xCurveA[1] * xCurveA[0] * xCurveB[1] * yCurveA[0] + xCurveA[2] * yCurveA[2] * xCurveA[1] * yCurveA[1] * xCurveA[0] * yCurveB[1] - xCurveA[2] * yCurveA[2] * xCurveA[1] * yCurveA[1] * xCurveB[1] * yCurveA[0] + xCurveA[2] * xCurveB[3] * yCurveA[1] * xCurveA[0] * yCurveA[0] * yCurveB[1] + xCurveA[2] * yCurveB[3] * yCurveA[1] * xCurveA[0] * xCurveB[1] * yCurveA[0] + xCurveA[2] * xCurveB[2] * yCurveA[1] * xCurveA[0] * yCurveB[2] * yCurveA[0] - xCurveB[3] * yCurveA[2] * xCurveA[1] * xCurveA[0] * yCurveA[0] * yCurveB[1] - 6 * xCurveB[3] * yCurveA[2] * yCurveA[1] * xCurveA[0] * xCurveB[1] * yCurveA[0] - yCurveA[2] * xCurveA[1] * yCurveB[3] * xCurveA[0] * xCurveB[1] * yCurveA[0] - yCurveA[2] * xCurveA[1] * xCurveB[2] * xCurveA[0] * yCurveB[2] * yCurveA[0] - 6 * xCurveA[3] * xCurveB[3] * xCurveB[1] * c13y3 - 2 * xCurveA[3] * c12y3 * xCurveA[0] * xCurveB[1] + 2 * xCurveB[3] * c12y3 * xCurveA[0] * xCurveB[1] + 2 * yCurveA[3] * c12x3 * yCurveA[0] * yCurveB[1] - 6 * xCurveA[3] * yCurveA[3] * xCurveA[0] * xCurveB[1] * c13y2 + 3 * xCurveA[3] * xCurveA[2] * xCurveA[1] * c13y2 * yCurveB[1] - 2 * xCurveA[3] * xCurveA[2] * yCurveA[1] * xCurveB[1] * c13y2 - 4 * xCurveA[3] * yCurveA[2] * xCurveA[1] * xCurveB[1] * c13y2 + 3 * yCurveA[3] * xCurveA[2] * xCurveA[1] * xCurveB[1] * c13y2 + 6 * xCurveA[3] * yCurveA[3] * c13x2 * yCurveA[0] * yCurveB[1] + 6 * xCurveA[3] * xCurveB[3] * xCurveA[0] * c13y2 * yCurveB[1] - 3 * xCurveA[3] * yCurveA[2] * yCurveA[1] * c13x2 * yCurveB[1] + 2 * xCurveA[3] * xCurveA[1] * c12y2 * xCurveA[0] * yCurveB[1] + 2 * xCurveA[3] * xCurveA[1] * c12y2 * xCurveB[1] * yCurveA[0] + 6 * xCurveA[3] * yCurveB[3] * xCurveA[0] * xCurveB[1] * c13y2 + 6 * xCurveA[3] * xCurveB[2] * xCurveA[0] * yCurveB[2] * c13y2 + 4 * yCurveA[3] * xCurveA[2] * yCurveA[1] * c13x2 * yCurveB[1] + 6 * yCurveA[3] * xCurveB[3] * xCurveA[0] * xCurveB[1] * c13y2 + 2 * yCurveA[3] * yCurveA[2] * xCurveA[1] * c13x2 * yCurveB[1] - 3 * yCurveA[3] * yCurveA[2] * yCurveA[1] * c13x2 * xCurveB[1] + 2 * yCurveA[3] * xCurveA[1] * c12y2 * xCurveA[0] * xCurveB[1] - 3 * xCurveA[2] * xCurveB[3] * xCurveA[1] * c13y2 * yCurveB[1] + 2 * xCurveA[2] * xCurveB[3] * yCurveA[1] * xCurveB[1] * c13y2 + xCurveA[2] * yCurveA[2] * c12y2 * xCurveA[0] * xCurveB[1] - 3 * xCurveA[2] * xCurveA[1] * yCurveB[3] * xCurveB[1] * c13y2 - 3 * xCurveA[2] * xCurveA[1] * xCurveB[2] * yCurveB[2] * c13y2 + 4 * xCurveB[3] * yCurveA[2] * xCurveA[1] * xCurveB[1] * c13y2 - 2 * xCurveA[3] * c12x2 * yCurveA[1] * yCurveA[0] * yCurveB[1] - 6 * yCurveA[3] * xCurveB[3] * c13x2 * yCurveA[0] * yCurveB[1] - 6 * yCurveA[3] * yCurveB[3] * c13x2 * xCurveB[1] * yCurveA[0] - 6 * yCurveA[3] * xCurveB[2] * c13x2 * yCurveB[2] * yCurveA[0] - 2 * yCurveA[3] * c12x2 * yCurveA[1] * xCurveA[0] * yCurveB[1] - 2 * yCurveA[3] * c12x2 * yCurveA[1] * xCurveB[1] * yCurveA[0] - xCurveA[2] * yCurveA[2] * c12x2 * yCurveA[0] * yCurveB[1] - 2 * xCurveA[2] * c11y2 * xCurveA[0] * xCurveB[1] * yCurveA[0] + 3 * xCurveB[3] * yCurveA[2] * yCurveA[1] * c13x2 * yCurveB[1] - 2 * xCurveB[3] * xCurveA[1] * c12y2 * xCurveA[0] * yCurveB[1] - 2 * xCurveB[3] * xCurveA[1] * c12y2 * xCurveB[1] * yCurveA[0] - 6 * xCurveB[3] * yCurveB[3] * xCurveA[0] * xCurveB[1] * c13y2 - 6 * xCurveB[3] * xCurveB[2] * xCurveA[0] * yCurveB[2] * c13y2 + 3 * yCurveA[2] * yCurveB[3] * yCurveA[1] * c13x2 * xCurveB[1] + 3 * yCurveA[2] * xCurveB[2] * yCurveA[1] * c13x2 * yCurveB[2] - 2 * xCurveA[1] * yCurveB[3] * c12y2 * xCurveA[0] * xCurveB[1] - 2 * xCurveA[1] * xCurveB[2] * c12y2 * xCurveA[0] * yCurveB[2] - c11y2 * xCurveA[1] * yCurveA[1] * xCurveA[0] * xCurveB[1] + 2 * xCurveB[3] * c12x2 * yCurveA[1] * yCurveA[0] * yCurveB[1] - 3 * yCurveA[2] * c21x2 * yCurveA[1] * xCurveA[0] * yCurveA[0] + 6 * yCurveB[3] * xCurveB[2] * c13x2 * yCurveB[2] * yCurveA[0] + 2 * c11x2 * yCurveA[2] * xCurveA[0] * yCurveA[0] * yCurveB[1] + c11x2 * xCurveA[1] * yCurveA[1] * yCurveA[0] * yCurveB[1] + 2 * c12x2 * yCurveB[3] * yCurveA[1] * xCurveB[1] * yCurveA[0] + 2 * c12x2 * xCurveB[2] * yCurveA[1] * yCurveB[2] * yCurveA[0] - 3 * xCurveA[3] * c21x2 * c13y3 + 3 * xCurveB[3] * c21x2 * c13y3 + 3 * c10x2 * xCurveB[1] * c13y3 - 3 * c10y2 * c13x3 * yCurveB[1] + 3 * c20x2 * xCurveB[1] * c13y3 + c21x2 * c12y3 * xCurveA[0] + c11y3 * c13x2 * xCurveB[1] - c11x3 * c13y2 * yCurveB[1] + 3 * yCurveA[3] * c21x2 * xCurveA[0] * c13y2 - xCurveA[2] * c11y2 * c13x2 * yCurveB[1] + xCurveA[2] * c21x2 * yCurveA[1] * c13y2 + 2 * yCurveA[2] * xCurveA[1] * c21x2 * c13y2 + c11x2 * yCurveA[2] * xCurveB[1] * c13y2 - xCurveA[1] * c21x2 * c12y2 * yCurveA[0] - 3 * yCurveB[3] * c21x2 * xCurveA[0] * c13y2 - 3 * c10x2 * xCurveA[0] * c13y2 * yCurveB[1] + 3 * c10y2 * c13x2 * xCurveB[1] * yCurveA[0] - c11x2 * c12y2 * xCurveA[0] * yCurveB[1] + c11y2 * c12x2 * xCurveB[1] * yCurveA[0] - 3 * c20x2 * xCurveA[0] * c13y2 * yCurveB[1] + 3 * c20y2 * c13x2 * xCurveB[1] * yCurveA[0] + c12x2 * yCurveA[1] * xCurveA[0] * (2 * yCurveB[3] * yCurveB[1] + c21y2) + xCurveA[2] * xCurveA[1] * xCurveA[0] * yCurveA[0] * (6 * yCurveB[3] * yCurveB[1] + 3 * c21y2) + c12x3 * yCurveA[0] * (-2 * yCurveB[3] * yCurveB[1] - c21y2) + yCurveA[3] * c13x3 * (6 * yCurveB[3] * yCurveB[1] + 3 * c21y2) + yCurveA[2] * xCurveA[1] * c13x2 * (-2 * yCurveB[3] * yCurveB[1] - c21y2) + xCurveA[2] * yCurveA[1] * c13x2 * (-4 * yCurveB[3] * yCurveB[1] - 2 * c21y2) + xCurveA[3] * c13x2 * yCurveA[0] * (-6 * yCurveB[3] * yCurveB[1] - 3 * c21y2) + xCurveB[3] * c13x2 * yCurveA[0] * (6 * yCurveB[3] * yCurveB[1] + 3 * c21y2) + c13x3 * (-2 * yCurveB[3] * c21y2 - c20y2 * yCurveB[1] - yCurveB[3] * (2 * yCurveB[3] * yCurveB[1] + c21y2)),
                /* x¹ */ -xCurveA[3] * xCurveA[2] * yCurveA[1] * xCurveA[0] * yCurveB[2] * yCurveA[0] + xCurveA[3] * yCurveA[2] * xCurveA[1] * xCurveA[0] * yCurveB[2] * yCurveA[0] + 6 * xCurveA[3] * yCurveA[2] * xCurveB[2] * yCurveA[1] * xCurveA[0] * yCurveA[0] - 6 * yCurveA[3] * xCurveA[2] * xCurveA[1] * xCurveA[0] * yCurveB[2] * yCurveA[0] - yCurveA[3] * xCurveA[2] * xCurveB[2] * yCurveA[1] * xCurveA[0] * yCurveA[0] + yCurveA[3] * yCurveA[2] * xCurveA[1] * xCurveB[2] * xCurveA[0] * yCurveA[0] - xCurveA[2] * yCurveA[2] * xCurveA[1] * xCurveB[2] * yCurveA[1] * yCurveA[0] + xCurveA[2] * yCurveA[2] * xCurveA[1] * yCurveA[1] * xCurveA[0] * yCurveB[2] + xCurveA[2] * xCurveB[3] * yCurveA[1] * xCurveA[0] * yCurveB[2] * yCurveA[0] + 6 * xCurveA[2] * xCurveA[1] * yCurveB[3] * xCurveA[0] * yCurveB[2] * yCurveA[0] + xCurveA[2] * yCurveB[3] * xCurveB[2] * yCurveA[1] * xCurveA[0] * yCurveA[0] - xCurveB[3] * yCurveA[2] * xCurveA[1] * xCurveA[0] * yCurveB[2] * yCurveA[0] - 6 * xCurveB[3] * yCurveA[2] * xCurveB[2] * yCurveA[1] * xCurveA[0] * yCurveA[0] - yCurveA[2] * xCurveA[1] * yCurveB[3] * xCurveB[2] * xCurveA[0] * yCurveA[0] - 6 * xCurveA[3] * xCurveB[3] * xCurveB[2] * c13y3 - 2 * xCurveA[3] * xCurveB[2] * c12y3 * xCurveA[0] + 6 * yCurveA[3] * yCurveB[3] * c13x3 * yCurveB[2] + 2 * xCurveB[3] * xCurveB[2] * c12y3 * xCurveA[0] + 2 * yCurveA[3] * c12x3 * yCurveB[2] * yCurveA[0] - 2 * c12x3 * yCurveB[3] * yCurveB[2] * yCurveA[0] - 6 * xCurveA[3] * yCurveA[3] * xCurveB[2] * xCurveA[0] * c13y2 + 3 * xCurveA[3] * xCurveA[2] * xCurveA[1] * yCurveB[2] * c13y2 - 2 * xCurveA[3] * xCurveA[2] * xCurveB[2] * yCurveA[1] * c13y2 - 4 * xCurveA[3] * yCurveA[2] * xCurveA[1] * xCurveB[2] * c13y2 + 3 * yCurveA[3] * xCurveA[2] * xCurveA[1] * xCurveB[2] * c13y2 + 6 * xCurveA[3] * yCurveA[3] * c13x2 * yCurveB[2] * yCurveA[0] + 6 * xCurveA[3] * xCurveB[3] * xCurveA[0] * yCurveB[2] * c13y2 - 3 * xCurveA[3] * yCurveA[2] * yCurveA[1] * c13x2 * yCurveB[2] + 2 * xCurveA[3] * xCurveA[1] * xCurveB[2] * c12y2 * yCurveA[0] + 2 * xCurveA[3] * xCurveA[1] * c12y2 * xCurveA[0] * yCurveB[2] + 6 * xCurveA[3] * yCurveB[3] * xCurveB[2] * xCurveA[0] * c13y2 + 4 * yCurveA[3] * xCurveA[2] * yCurveA[1] * c13x2 * yCurveB[2] + 6 * yCurveA[3] * xCurveB[3] * xCurveB[2] * xCurveA[0] * c13y2 + 2 * yCurveA[3] * yCurveA[2] * xCurveA[1] * c13x2 * yCurveB[2] - 3 * yCurveA[3] * yCurveA[2] * xCurveB[2] * yCurveA[1] * c13x2 + 2 * yCurveA[3] * xCurveA[1] * xCurveB[2] * c12y2 * xCurveA[0] - 3 * xCurveA[2] * xCurveB[3] * xCurveA[1] * yCurveB[2] * c13y2 + 2 * xCurveA[2] * xCurveB[3] * xCurveB[2] * yCurveA[1] * c13y2 + xCurveA[2] * yCurveA[2] * xCurveB[2] * c12y2 * xCurveA[0] - 3 * xCurveA[2] * xCurveA[1] * yCurveB[3] * xCurveB[2] * c13y2 + 4 * xCurveB[3] * yCurveA[2] * xCurveA[1] * xCurveB[2] * c13y2 - 6 * xCurveA[3] * yCurveB[3] * c13x2 * yCurveB[2] * yCurveA[0] - 2 * xCurveA[3] * c12x2 * yCurveA[1] * yCurveB[2] * yCurveA[0] - 6 * yCurveA[3] * xCurveB[3] * c13x2 * yCurveB[2] * yCurveA[0] - 6 * yCurveA[3] * yCurveB[3] * xCurveB[2] * c13x2 * yCurveA[0] - 2 * yCurveA[3] * c12x2 * xCurveB[2] * yCurveA[1] * yCurveA[0] - 2 * yCurveA[3] * c12x2 * yCurveA[1] * xCurveA[0] * yCurveB[2] - xCurveA[2] * yCurveA[2] * c12x2 * yCurveB[2] * yCurveA[0] - 4 * xCurveA[2] * yCurveB[3] * yCurveA[1] * c13x2 * yCurveB[2] - 2 * xCurveA[2] * c11y2 * xCurveB[2] * xCurveA[0] * yCurveA[0] + 3 * xCurveB[3] * yCurveA[2] * yCurveA[1] * c13x2 * yCurveB[2] - 2 * xCurveB[3] * xCurveA[1] * xCurveB[2] * c12y2 * yCurveA[0] - 2 * xCurveB[3] * xCurveA[1] * c12y2 * xCurveA[0] * yCurveB[2] - 6 * xCurveB[3] * yCurveB[3] * xCurveB[2] * xCurveA[0] * c13y2 - 2 * yCurveA[2] * xCurveA[1] * yCurveB[3] * c13x2 * yCurveB[2] + 3 * yCurveA[2] * yCurveB[3] * xCurveB[2] * yCurveA[1] * c13x2 - 2 * xCurveA[1] * yCurveB[3] * xCurveB[2] * c12y2 * xCurveA[0] - c11y2 * xCurveA[1] * xCurveB[2] * yCurveA[1] * xCurveA[0] + 6 * xCurveB[3] * yCurveB[3] * c13x2 * yCurveB[2] * yCurveA[0] + 2 * xCurveB[3] * c12x2 * yCurveA[1] * yCurveB[2] * yCurveA[0] + 2 * c11x2 * yCurveA[2] * xCurveA[0] * yCurveB[2] * yCurveA[0] + c11x2 * xCurveA[1] * yCurveA[1] * yCurveB[2] * yCurveA[0] + 2 * c12x2 * yCurveB[3] * xCurveB[2] * yCurveA[1] * yCurveA[0] + 2 * c12x2 * yCurveB[3] * yCurveA[1] * xCurveA[0] * yCurveB[2] + 3 * c10x2 * xCurveB[2] * c13y3 - 3 * c10y2 * c13x3 * yCurveB[2] + 3 * c20x2 * xCurveB[2] * c13y3 + c11y3 * xCurveB[2] * c13x2 - c11x3 * yCurveB[2] * c13y2 - 3 * c20y2 * c13x3 * yCurveB[2] - xCurveA[2] * c11y2 * c13x2 * yCurveB[2] + c11x2 * yCurveA[2] * xCurveB[2] * c13y2 - 3 * c10x2 * xCurveA[0] * yCurveB[2] * c13y2 + 3 * c10y2 * xCurveB[2] * c13x2 * yCurveA[0] - c11x2 * c12y2 * xCurveA[0] * yCurveB[2] + c11y2 * c12x2 * xCurveB[2] * yCurveA[0] - 3 * c20x2 * xCurveA[0] * yCurveB[2] * c13y2 + 3 * c20y2 * xCurveB[2] * c13x2 * yCurveA[0],
                /* c  */ xCurveA[3] * yCurveA[3] * xCurveA[2] * yCurveA[1] * xCurveA[0] * yCurveA[0] - xCurveA[3] * yCurveA[3] * yCurveA[2] * xCurveA[1] * xCurveA[0] * yCurveA[0] + xCurveA[3] * xCurveA[2] * yCurveA[2] * xCurveA[1] * yCurveA[1] * yCurveA[0] - yCurveA[3] * xCurveA[2] * yCurveA[2] * xCurveA[1] * yCurveA[1] * xCurveA[0] - xCurveA[3] * xCurveA[2] * yCurveB[3] * yCurveA[1] * xCurveA[0] * yCurveA[0] + 6 * xCurveA[3] * xCurveB[3] * yCurveA[2] * yCurveA[1] * xCurveA[0] * yCurveA[0] + xCurveA[3] * yCurveA[2] * xCurveA[1] * yCurveB[3] * xCurveA[0] * yCurveA[0] - yCurveA[3] * xCurveA[2] * xCurveB[3] * yCurveA[1] * xCurveA[0] * yCurveA[0] - 6 * yCurveA[3] * xCurveA[2] * xCurveA[1] * yCurveB[3] * xCurveA[0] * yCurveA[0] + yCurveA[3] * xCurveB[3] * yCurveA[2] * xCurveA[1] * xCurveA[0] * yCurveA[0] - xCurveA[2] * xCurveB[3] * yCurveA[2] * xCurveA[1] * yCurveA[1] * yCurveA[0] + xCurveA[2] * yCurveA[2] * xCurveA[1] * yCurveB[3] * yCurveA[1] * xCurveA[0] + xCurveA[2] * xCurveB[3] * yCurveB[3] * yCurveA[1] * xCurveA[0] * yCurveA[0] - xCurveB[3] * yCurveA[2] * xCurveA[1] * yCurveB[3] * xCurveA[0] * yCurveA[0] - 2 * xCurveA[3] * xCurveB[3] * c12y3 * xCurveA[0] + 2 * yCurveA[3] * c12x3 * yCurveB[3] * yCurveA[0] - 3 * xCurveA[3] * yCurveA[3] * xCurveA[2] * xCurveA[1] * c13y2 - 6 * xCurveA[3] * yCurveA[3] * xCurveB[3] * xCurveA[0] * c13y2 + 3 * xCurveA[3] * yCurveA[3] * yCurveA[2] * yCurveA[1] * c13x2 - 2 * xCurveA[3] * yCurveA[3] * xCurveA[1] * c12y2 * xCurveA[0] - 2 * xCurveA[3] * xCurveA[2] * xCurveB[3] * yCurveA[1] * c13y2 - xCurveA[3] * xCurveA[2] * yCurveA[2] * c12y2 * xCurveA[0] + 3 * xCurveA[3] * xCurveA[2] * xCurveA[1] * yCurveB[3] * c13y2 - 4 * xCurveA[3] * xCurveB[3] * yCurveA[2] * xCurveA[1] * c13y2 + 3 * yCurveA[3] * xCurveA[2] * xCurveB[3] * xCurveA[1] * c13y2 + 6 * xCurveA[3] * yCurveA[3] * yCurveB[3] * c13x2 * yCurveA[0] + 2 * xCurveA[3] * yCurveA[3] * c12x2 * yCurveA[1] * yCurveA[0] + 2 * xCurveA[3] * xCurveA[2] * c11y2 * xCurveA[0] * yCurveA[0] + 2 * xCurveA[3] * xCurveB[3] * xCurveA[1] * c12y2 * yCurveA[0] + 6 * xCurveA[3] * xCurveB[3] * yCurveB[3] * xCurveA[0] * c13y2 - 3 * xCurveA[3] * yCurveA[2] * yCurveB[3] * yCurveA[1] * c13x2 + 2 * xCurveA[3] * xCurveA[1] * yCurveB[3] * c12y2 * xCurveA[0] + xCurveA[3] * c11y2 * xCurveA[1] * yCurveA[1] * xCurveA[0] + yCurveA[3] * xCurveA[2] * yCurveA[2] * c12x2 * yCurveA[0] + 4 * yCurveA[3] * xCurveA[2] * yCurveB[3] * yCurveA[1] * c13x2 - 3 * yCurveA[3] * xCurveB[3] * yCurveA[2] * yCurveA[1] * c13x2 + 2 * yCurveA[3] * xCurveB[3] * xCurveA[1] * c12y2 * xCurveA[0] + 2 * yCurveA[3] * yCurveA[2] * xCurveA[1] * yCurveB[3] * c13x2 + xCurveA[2] * xCurveB[3] * yCurveA[2] * c12y2 * xCurveA[0] - 3 * xCurveA[2] * xCurveB[3] * xCurveA[1] * yCurveB[3] * c13y2 - 2 * xCurveA[3] * c12x2 * yCurveB[3] * yCurveA[1] * yCurveA[0] - 6 * yCurveA[3] * xCurveB[3] * yCurveB[3] * c13x2 * yCurveA[0] - 2 * yCurveA[3] * xCurveB[3] * c12x2 * yCurveA[1] * yCurveA[0] - 2 * yCurveA[3] * c11x2 * yCurveA[2] * xCurveA[0] * yCurveA[0] - yCurveA[3] * c11x2 * xCurveA[1] * yCurveA[1] * yCurveA[0] - 2 * yCurveA[3] * c12x2 * yCurveB[3] * yCurveA[1] * xCurveA[0] - 2 * xCurveA[2] * xCurveB[3] * c11y2 * xCurveA[0] * yCurveA[0] - xCurveA[2] * yCurveA[2] * c12x2 * yCurveB[3] * yCurveA[0] + 3 * xCurveB[3] * yCurveA[2] * yCurveB[3] * yCurveA[1] * c13x2 - 2 * xCurveB[3] * xCurveA[1] * yCurveB[3] * c12y2 * xCurveA[0] - xCurveB[3] * c11y2 * xCurveA[1] * yCurveA[1] * xCurveA[0] + 3 * c10y2 * xCurveA[2] * xCurveA[1] * xCurveA[0] * yCurveA[0] + 3 * xCurveA[2] * xCurveA[1] * c20y2 * xCurveA[0] * yCurveA[0] + 2 * xCurveB[3] * c12x2 * yCurveB[3] * yCurveA[1] * yCurveA[0] - 3 * c10x2 * yCurveA[2] * yCurveA[1] * xCurveA[0] * yCurveA[0] + 2 * c11x2 * yCurveA[2] * yCurveB[3] * xCurveA[0] * yCurveA[0] + c11x2 * xCurveA[1] * yCurveB[3] * yCurveA[1] * yCurveA[0] - 3 * c20x2 * yCurveA[2] * yCurveA[1] * xCurveA[0] * yCurveA[0] - c10x3 * c13y3 + c10y3 * c13x3 + c20x3 * c13y3 - c20y3 * c13x3 - 3 * xCurveA[3] * c20x2 * c13y3 - xCurveA[3] * c11y3 * c13x2 + 3 * c10x2 * xCurveB[3] * c13y3 + yCurveA[3] * c11x3 * c13y2 + 3 * yCurveA[3] * c20y2 * c13x3 + xCurveB[3] * c11y3 * c13x2 + c10x2 * c12y3 * xCurveA[0] - 3 * c10y2 * yCurveB[3] * c13x3 - c10y2 * c12x3 * yCurveA[0] + c20x2 * c12y3 * xCurveA[0] - c11x3 * yCurveB[3] * c13y2 - c12x3 * c20y2 * yCurveA[0] - xCurveA[3] * c11x2 * yCurveA[2] * c13y2 + yCurveA[3] * xCurveA[2] * c11y2 * c13x2 - 3 * xCurveA[3] * c10y2 * c13x2 * yCurveA[0] - xCurveA[3] * c11y2 * c12x2 * yCurveA[0] + yCurveA[3] * c11x2 * c12y2 * xCurveA[0] - xCurveA[2] * c11y2 * yCurveB[3] * c13x2 + 3 * c10x2 * yCurveA[3] * xCurveA[0] * c13y2 + c10x2 * xCurveA[2] * yCurveA[1] * c13y2 + 2 * c10x2 * yCurveA[2] * xCurveA[1] * c13y2 - 2 * c10y2 * xCurveA[2] * yCurveA[1] * c13x2 - c10y2 * yCurveA[2] * xCurveA[1] * c13x2 + c11x2 * xCurveB[3] * yCurveA[2] * c13y2 - 3 * xCurveA[3] * c20y2 * c13x2 * yCurveA[0] + 3 * yCurveA[3] * c20x2 * xCurveA[0] * c13y2 + xCurveA[2] * c20x2 * yCurveA[1] * c13y2 - 2 * xCurveA[2] * c20y2 * yCurveA[1] * c13x2 + xCurveB[3] * c11y2 * c12x2 * yCurveA[0] - yCurveA[2] * xCurveA[1] * c20y2 * c13x2 - c10x2 * xCurveA[1] * c12y2 * yCurveA[0] - 3 * c10x2 * yCurveB[3] * xCurveA[0] * c13y2 + 3 * c10y2 * xCurveB[3] * c13x2 * yCurveA[0] + c10y2 * c12x2 * yCurveA[1] * xCurveA[0] - c11x2 * yCurveB[3] * c12y2 * xCurveA[0] + 2 * c20x2 * yCurveA[2] * xCurveA[1] * c13y2 + 3 * xCurveB[3] * c20y2 * c13x2 * yCurveA[0] - c20x2 * xCurveA[1] * c12y2 * yCurveA[0] - 3 * c20x2 * yCurveB[3] * xCurveA[0] * c13y2 + c12x2 * c20y2 * yCurveA[1] * xCurveA[0]
            ).Trim().RootsInInterval();

            foreach (var s in roots)
            {
                var point = new Point2D(
                    xCurveB[0] * s * s * s + xCurveB[1] * s * s + xCurveB[2] * s + xCurveB[3],
                    yCurveB[0] * s * s * s + yCurveB[1] * s * s + yCurveB[2] * s + yCurveB[3]);

                var xRoots = (xCurveA - point.X).Trim().Roots();
                var yRoots = (yCurveA - point.Y).Trim().Roots();

                // ToDo: Figure out why the xRoots can be larger than 1 or smaller than 0 and still work...
                if (xRoots.Length > 0 && yRoots.Length > 0)
                {
                    // Find the nearest matching x and y roots in the ranges 0 < x < 1; 0 < y < 1.
                    foreach (var xRoot in xRoots)
                    {
                        if (0 <= xRoot && xRoot <= 1)
                        {
                            foreach (var yRoot in yRoots)
                            {
                                var t = xRoot - yRoot;
                                if ((t >= 0 ? t : -t) < tolerance)
                                {
                                    result.Points.Add(point);
                                    goto checkRoots; // Break through two levels of for each loops. Using goto for performance.
                                }
                            }
                        }
                    }
                checkRoots:;
                }
            }

            if (result.Points.Count > 0)
            {
                result.State = IntersectionState.Intersection;
            }

            return result;
        }

        /// <summary>
        /// Find the intersection between two cubic Bezier curves.
        /// </summary>
        /// <param name="a1X"></param>
        /// <param name="a1Y"></param>
        /// <param name="a2X"></param>
        /// <param name="a2Y"></param>
        /// <param name="a3X"></param>
        /// <param name="a3Y"></param>
        /// <param name="a4X"></param>
        /// <param name="a4Y"></param>
        /// <param name="b1X"></param>
        /// <param name="b1Y"></param>
        /// <param name="b2X"></param>
        /// <param name="b2Y"></param>
        /// <param name="b3X"></param>
        /// <param name="b3Y"></param>
        /// <param name="b4X"></param>
        /// <param name="b4Y"></param>
        /// <param name="epsilon">The <paramref name="epsilon"/> or minimal value to represent a change.</param>
        /// <returns></returns>
        /// <acknowledgment>
        /// http://www.kevlindev.com/
        /// </acknowledgment>
        [DisplayName("Cubic Bezier Segment Cubic Bezier Segment Intersection")]
        [Description("Find the intersection between two Cubic Bezier curves.")]
        [Acknowledgment("http://www.kevlindev.com/", "https://github.com/thelonious/kld-intersections/")]
        [SourceCodeLocationProvider]
        //[DebuggerStepThrough]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Intersection CubicBezierSegmentCubicBezierSegmentIntersection1(
            double a1X, double a1Y, double a2X, double a2Y, double a3X, double a3Y, double a4X, double a4Y,
            double b1X, double b1Y, double b2X, double b2Y, double b3X, double b3Y, double b4X, double b4Y, double epsilon = Epsilon)
        {
            var a = new Vector2D(a1X, a1Y) * -1;
            var b = new Vector2D(a2X, a2Y) * 3;
            var c = new Vector2D(a3X, a3Y) * -3;
            var d = a + b + c + new Vector2D(a4X, a4Y);
            var c13 = new Vector2D(d.I, d.J);
            a = new Vector2D(a1X, a1Y) * 3;
            b = new Vector2D(a2X, a2Y) * -6;
            c = new Vector2D(a3X, a3Y) * 3;
            d = a + b + c;
            var c12 = new Vector2D(d.I, d.J);
            a = new Vector2D(a1X, a1Y) * -3;
            b = new Vector2D(a2X, a2Y) * 3;
            c = a + b;
            var c11 = new Vector2D(c.I, c.J);
            var c10 = new Vector2D(a1X, a1Y);
            a = new Vector2D(b1X, b1Y) * -1;
            b = new Vector2D(b2X, b2Y) * 3;
            c = new Vector2D(b3X, b3Y) * -3;
            d = a + b + c + new Vector2D(b4X, b4Y);
            var c23 = new Vector2D(d.I, d.J);
            a = new Vector2D(b1X, b1Y) * 3;
            b = new Vector2D(b2X, b2Y) * -6;
            c = new Vector2D(b3X, b3Y) * 3;
            d = a + b + c;
            var c22 = new Vector2D(d.I, d.J);
            a = new Vector2D(b1X, b1Y) * -3;
            b = new Vector2D(b2X, b2Y) * 3;
            c = a + b;
            var c21 = new Vector2D(c.I, c.J);
            var c20 = new Vector2D(b1X, b1Y);

            var c10x2 = c10.I * c10.I;
            var c10x3 = c10.I * c10.I * c10.I;
            var c10y2 = c10.J * c10.J;
            var c10y3 = c10.J * c10.J * c10.J;
            var c11x2 = c11.I * c11.I;
            var c11x3 = c11.I * c11.I * c11.I;
            var c11y2 = c11.J * c11.J;
            var c11y3 = c11.J * c11.J * c11.J;
            var c12x2 = c12.I * c12.I;
            var c12x3 = c12.I * c12.I * c12.I;
            var c12y2 = c12.J * c12.J;
            var c12y3 = c12.J * c12.J * c12.J;
            var c13x2 = c13.I * c13.I;
            var c13x3 = c13.I * c13.I * c13.I;
            var c13y2 = c13.J * c13.J;
            var c13y3 = c13.J * c13.J * c13.J;
            var c20x2 = c20.I * c20.I;
            var c20x3 = c20.I * c20.I * c20.I;
            var c20y2 = c20.J * c20.J;
            var c20y3 = c20.J * c20.J * c20.J;
            var c21x2 = c21.I * c21.I;
            var c21x3 = c21.I * c21.I * c21.I;
            var c21y2 = c21.J * c21.J;
            var c22x2 = c22.I * c22.I;
            var c22x3 = c22.I * c22.I * c22.I;
            var c22y2 = c22.J * c22.J;
            var c23x2 = c23.I * c23.I;
            var c23x3 = c23.I * c23.I * c23.I;
            var c23y2 = c23.J * c23.J;
            var c23y3 = c23.J * c23.J * c23.J;

            var t9 = -c13x3 * c23y3 + c13y3 * c23x3 - 3 * c13.I * c13y2 * c23x2 * c23.J + 3 * c13x2 * c13.J * c23.I * c23y2;
            var roots = new Polynomial(
                /* t^9 */ t9,
                /* t^8 */ -6 * c13.I * c22.I * c13y2 * c23.I * c23.J + 6 * c13x2 * c13.J * c22.J * c23.I * c23.J + 3 * c22.I * c13y3 * c23x2 - 3 * c13x3 * c22.J * c23y2 - 3 * c13.I * c13y2 * c22.J * c23x2 + 3 * c13x2 * c22.I * c13.J * c23y2,
                /* t^7 */ -6 * c21.I * c13.I * c13y2 * c23.I * c23.J - 6 * c13.I * c22.I * c13y2 * c22.J * c23.I + 6 * c13x2 * c22.I * c13.J * c22.J * c23.J + 3 * c21.I * c13y3 * c23x2 + 3 * c22x2 * c13y3 * c23.I + 3 * c21.I * c13x2 * c13.J * c23y2 - 3 * c13.I * c21.J * c13y2 * c23x2 - 3 * c13.I * c22x2 * c13y2 * c23.J + c13x2 * c13.J * c23.I * (6 * c21.J * c23.J + 3 * c22y2) + c13x3 * (-c21.J * c23y2 - 2 * c22y2 * c23.J - c23.J * (2 * c21.J * c23.J + c22y2)),
                /* t^6 */ c11.I * c12.J * c13.I * c13.J * c23.I * c23.J - c11.J * c12.I * c13.I * c13.J * c23.I * c23.J + 6 * c21.I * c22.I * c13y3 * c23.I + 3 * c11.I * c12.I * c13.I * c13.J * c23y2 + 6 * c10.I * c13.I * c13y2 * c23.I * c23.J - 3 * c11.I * c12.I * c13y2 * c23.I * c23.J - 3 * c11.J * c12.J * c13.I * c13.J * c23x2 - 6 * c10.J * c13x2 * c13.J * c23.I * c23.J - 6 * c20.I * c13.I * c13y2 * c23.I * c23.J + 3 * c11.J * c12.J * c13x2 * c23.I * c23.J - 2 * c12.I * c12y2 * c13.I * c23.I * c23.J - 6 * c21.I * c13.I * c22.I * c13y2 * c23.J - 6 * c21.I * c13.I * c13y2 * c22.J * c23.I - 6 * c13.I * c21.J * c22.I * c13y2 * c23.I + 6 * c21.I * c13x2 * c13.J * c22.J * c23.J + 2 * c12x2 * c12.J * c13.J * c23.I * c23.J + c22x3 * c13y3 - 3 * c10.I * c13y3 * c23x2 + 3 * c10.J * c13x3 * c23y2 + 3 * c20.I * c13y3 * c23x2 + c12y3 * c13.I * c23x2 - c12x3 * c13.J * c23y2 - 3 * c10.I * c13x2 * c13.J * c23y2 + 3 * c10.J * c13.I * c13y2 * c23x2 - 2 * c11.I * c12.J * c13x2 * c23y2 + c11.I * c12.J * c13y2 * c23x2 - c11.J * c12.I * c13x2 * c23y2 + 2 * c11.J * c12.I * c13y2 * c23x2 + 3 * c20.I * c13x2 * c13.J * c23y2 - c12.I * c12y2 * c13.J * c23x2 - 3 * c20.J * c13.I * c13y2 * c23x2 + c12x2 * c12.J * c13.I * c23y2 - 3 * c13.I * c22x2 * c13y2 * c22.J + c13x2 * c13.J * c23.I * (6 * c20.J * c23.J + 6 * c21.J * c22.J) + c13x2 * c22.I * c13.J * (6 * c21.J * c23.J + 3 * c22y2) + c13x3 * (-2 * c21.J * c22.J * c23.J - c20.J * c23y2 - c22.J * (2 * c21.J * c23.J + c22y2) - c23.J * (2 * c20.J * c23.J + 2 * c21.J * c22.J)),
                /* t^5 */ 6 * c11.I * c12.I * c13.I * c13.J * c22.J * c23.J + c11.I * c12.J * c13.I * c22.I * c13.J * c23.J + c11.I * c12.J * c13.I * c13.J * c22.J * c23.I - c11.J * c12.I * c13.I * c22.I * c13.J * c23.J - c11.J * c12.I * c13.I * c13.J * c22.J * c23.I - 6 * c11.J * c12.J * c13.I * c22.I * c13.J * c23.I - 6 * c10.I * c22.I * c13y3 * c23.I + 6 * c20.I * c22.I * c13y3 * c23.I + 6 * c10.J * c13x3 * c22.J * c23.J + 2 * c12y3 * c13.I * c22.I * c23.I - 2 * c12x3 * c13.J * c22.J * c23.J + 6 * c10.I * c13.I * c22.I * c13y2 * c23.J + 6 * c10.I * c13.I * c13y2 * c22.J * c23.I + 6 * c10.J * c13.I * c22.I * c13y2 * c23.I - 3 * c11.I * c12.I * c22.I * c13y2 * c23.J - 3 * c11.I * c12.I * c13y2 * c22.J * c23.I + 2 * c11.I * c12.J * c22.I * c13y2 * c23.I + 4 * c11.J * c12.I * c22.I * c13y2 * c23.I - 6 * c10.I * c13x2 * c13.J * c22.J * c23.J - 6 * c10.J * c13x2 * c22.I * c13.J * c23.J - 6 * c10.J * c13x2 * c13.J * c22.J * c23.I - 4 * c11.I * c12.J * c13x2 * c22.J * c23.J - 6 * c20.I * c13.I * c22.I * c13y2 * c23.J - 6 * c20.I * c13.I * c13y2 * c22.J * c23.I - 2 * c11.J * c12.I * c13x2 * c22.J * c23.J + 3 * c11.J * c12.J * c13x2 * c22.I * c23.J + 3 * c11.J * c12.J * c13x2 * c22.J * c23.I - 2 * c12.I * c12y2 * c13.I * c22.I * c23.J - 2 * c12.I * c12y2 * c13.I * c22.J * c23.I - 2 * c12.I * c12y2 * c22.I * c13.J * c23.I - 6 * c20.J * c13.I * c22.I * c13y2 * c23.I - 6 * c21.I * c13.I * c21.J * c13y2 * c23.I - 6 * c21.I * c13.I * c22.I * c13y2 * c22.J + 6 * c20.I * c13x2 * c13.J * c22.J * c23.J + 2 * c12x2 * c12.J * c13.I * c22.J * c23.J + 2 * c12x2 * c12.J * c22.I * c13.J * c23.J + 2 * c12x2 * c12.J * c13.J * c22.J * c23.I + 3 * c21.I * c22x2 * c13y3 + 3 * c21x2 * c13y3 * c23.I - 3 * c13.I * c21.J * c22x2 * c13y2 - 3 * c21x2 * c13.I * c13y2 * c23.J + c13x2 * c22.I * c13.J * (6 * c20.J * c23.J + 6 * c21.J * c22.J) + c13x2 * c13.J * c23.I * (6 * c20.J * c22.J + 3 * c21y2) + c21.I * c13x2 * c13.J * (6 * c21.J * c23.J + 3 * c22y2) + c13x3 * (-2 * c20.J * c22.J * c23.J - c23.J * (2 * c20.J * c22.J + c21y2) - c21.J * (2 * c21.J * c23.J + c22y2) - c22.J * (2 * c20.J * c23.J + 2 * c21.J * c22.J)),
                /* t^4 */ c11.I * c21.I * c12.J * c13.I * c13.J * c23.J + c11.I * c12.J * c13.I * c21.J * c13.J * c23.I + c11.I * c12.J * c13.I * c22.I * c13.J * c22.J - c11.J * c12.I * c21.I * c13.I * c13.J * c23.J - c11.J * c12.I * c13.I * c21.J * c13.J * c23.I - c11.J * c12.I * c13.I * c22.I * c13.J * c22.J - 6 * c11.J * c21.I * c12.J * c13.I * c13.J * c23.I - 6 * c10.I * c21.I * c13y3 * c23.I + 6 * c20.I * c21.I * c13y3 * c23.I + 2 * c21.I * c12y3 * c13.I * c23.I + 6 * c10.I * c21.I * c13.I * c13y2 * c23.J + 6 * c10.I * c13.I * c21.J * c13y2 * c23.I + 6 * c10.I * c13.I * c22.I * c13y2 * c22.J + 6 * c10.J * c21.I * c13.I * c13y2 * c23.I - 3 * c11.I * c12.I * c21.I * c13y2 * c23.J - 3 * c11.I * c12.I * c21.J * c13y2 * c23.I - 3 * c11.I * c12.I * c22.I * c13y2 * c22.J + 2 * c11.I * c21.I * c12.J * c13y2 * c23.I + 4 * c11.J * c12.I * c21.I * c13y2 * c23.I - 6 * c10.J * c21.I * c13x2 * c13.J * c23.J - 6 * c10.J * c13x2 * c21.J * c13.J * c23.I - 6 * c10.J * c13x2 * c22.I * c13.J * c22.J - 6 * c20.I * c21.I * c13.I * c13y2 * c23.J - 6 * c20.I * c13.I * c21.J * c13y2 * c23.I - 6 * c20.I * c13.I * c22.I * c13y2 * c22.J + 3 * c11.J * c21.I * c12.J * c13x2 * c23.J - 3 * c11.J * c12.J * c13.I * c22x2 * c13.J + 3 * c11.J * c12.J * c13x2 * c21.J * c23.I + 3 * c11.J * c12.J * c13x2 * c22.I * c22.J - 2 * c12.I * c21.I * c12y2 * c13.I * c23.J - 2 * c12.I * c21.I * c12y2 * c13.J * c23.I - 2 * c12.I * c12y2 * c13.I * c21.J * c23.I - 2 * c12.I * c12y2 * c13.I * c22.I * c22.J - 6 * c20.J * c21.I * c13.I * c13y2 * c23.I - 6 * c21.I * c13.I * c21.J * c22.I * c13y2 + 6 * c20.J * c13x2 * c21.J * c13.J * c23.I + 2 * c12x2 * c21.I * c12.J * c13.J * c23.J + 2 * c12x2 * c12.J * c21.J * c13.J * c23.I + 2 * c12x2 * c12.J * c22.I * c13.J * c22.J - 3 * c10.I * c22x2 * c13y3 + 3 * c20.I * c22x2 * c13y3 + 3 * c21x2 * c22.I * c13y3 + c12y3 * c13.I * c22x2 + 3 * c10.J * c13.I * c22x2 * c13y2 + c11.I * c12.J * c22x2 * c13y2 + 2 * c11.J * c12.I * c22x2 * c13y2 - c12.I * c12y2 * c22x2 * c13.J - 3 * c20.J * c13.I * c22x2 * c13y2 - 3 * c21x2 * c13.I * c13y2 * c22.J + c12x2 * c12.J * c13.I * (2 * c21.J * c23.J + c22y2) + c11.I * c12.I * c13.I * c13.J * (6 * c21.J * c23.J + 3 * c22y2) + c21.I * c13x2 * c13.J * (6 * c20.J * c23.J + 6 * c21.J * c22.J) + c12x3 * c13.J * (-2 * c21.J * c23.J - c22y2) + c10.J * c13x3 * (6 * c21.J * c23.J + 3 * c22y2) + c11.J * c12.I * c13x2 * (-2 * c21.J * c23.J - c22y2) + c11.I * c12.J * c13x2 * (-4 * c21.J * c23.J - 2 * c22y2) + c10.I * c13x2 * c13.J * (-6 * c21.J * c23.J - 3 * c22y2) + c13x2 * c22.I * c13.J * (6 * c20.J * c22.J + 3 * c21y2) + c20.I * c13x2 * c13.J * (6 * c21.J * c23.J + 3 * c22y2) + c13x3 * (-2 * c20.J * c21.J * c23.J - c22.J * (2 * c20.J * c22.J + c21y2) - c20.J * (2 * c21.J * c23.J + c22y2) - c21.J * (2 * c20.J * c23.J + 2 * c21.J * c22.J)),
                /* t^3 */ -c10.I * c11.I * c12.J * c13.I * c13.J * c23.J + c10.I * c11.J * c12.I * c13.I * c13.J * c23.J + 6 * c10.I * c11.J * c12.J * c13.I * c13.J * c23.I - 6 * c10.J * c11.I * c12.I * c13.I * c13.J * c23.J - c10.J * c11.I * c12.J * c13.I * c13.J * c23.I + c10.J * c11.J * c12.I * c13.I * c13.J * c23.I + c11.I * c11.J * c12.I * c12.J * c13.I * c23.J - c11.I * c11.J * c12.I * c12.J * c13.J * c23.I + c11.I * c20.I * c12.J * c13.I * c13.J * c23.J + c11.I * c20.J * c12.J * c13.I * c13.J * c23.I + c11.I * c21.I * c12.J * c13.I * c13.J * c22.J + c11.I * c12.J * c13.I * c21.J * c22.I * c13.J - c20.I * c11.J * c12.I * c13.I * c13.J * c23.J - 6 * c20.I * c11.J * c12.J * c13.I * c13.J * c23.I - c11.J * c12.I * c20.J * c13.I * c13.J * c23.I - c11.J * c12.I * c21.I * c13.I * c13.J * c22.J - c11.J * c12.I * c13.I * c21.J * c22.I * c13.J - 6 * c11.J * c21.I * c12.J * c13.I * c22.I * c13.J - 6 * c10.I * c20.I * c13y3 * c23.I - 6 * c10.I * c21.I * c22.I * c13y3 - 2 * c10.I * c12y3 * c13.I * c23.I + 6 * c20.I * c21.I * c22.I * c13y3 + 2 * c20.I * c12y3 * c13.I * c23.I + 2 * c21.I * c12y3 * c13.I * c22.I + 2 * c10.J * c12x3 * c13.J * c23.J - 6 * c10.I * c10.J * c13.I * c13y2 * c23.I + 3 * c10.I * c11.I * c12.I * c13y2 * c23.J - 2 * c10.I * c11.I * c12.J * c13y2 * c23.I - 4 * c10.I * c11.J * c12.I * c13y2 * c23.I + 3 * c10.J * c11.I * c12.I * c13y2 * c23.I + 6 * c10.I * c10.J * c13x2 * c13.J * c23.J + 6 * c10.I * c20.I * c13.I * c13y2 * c23.J - 3 * c10.I * c11.J * c12.J * c13x2 * c23.J + 2 * c10.I * c12.I * c12y2 * c13.I * c23.J + 2 * c10.I * c12.I * c12y2 * c13.J * c23.I + 6 * c10.I * c20.J * c13.I * c13y2 * c23.I + 6 * c10.I * c21.I * c13.I * c13y2 * c22.J + 6 * c10.I * c13.I * c21.J * c22.I * c13y2 + 4 * c10.J * c11.I * c12.J * c13x2 * c23.J + 6 * c10.J * c20.I * c13.I * c13y2 * c23.I + 2 * c10.J * c11.J * c12.I * c13x2 * c23.J - 3 * c10.J * c11.J * c12.J * c13x2 * c23.I + 2 * c10.J * c12.I * c12y2 * c13.I * c23.I + 6 * c10.J * c21.I * c13.I * c22.I * c13y2 - 3 * c11.I * c20.I * c12.I * c13y2 * c23.J + 2 * c11.I * c20.I * c12.J * c13y2 * c23.I + c11.I * c11.J * c12y2 * c13.I * c23.I - 3 * c11.I * c12.I * c20.J * c13y2 * c23.I - 3 * c11.I * c12.I * c21.I * c13y2 * c22.J - 3 * c11.I * c12.I * c21.J * c22.I * c13y2 + 2 * c11.I * c21.I * c12.J * c22.I * c13y2 + 4 * c20.I * c11.J * c12.I * c13y2 * c23.I + 4 * c11.J * c12.I * c21.I * c22.I * c13y2 - 2 * c10.I * c12x2 * c12.J * c13.J * c23.J - 6 * c10.J * c20.I * c13x2 * c13.J * c23.J - 6 * c10.J * c20.J * c13x2 * c13.J * c23.I - 6 * c10.J * c21.I * c13x2 * c13.J * c22.J - 2 * c10.J * c12x2 * c12.J * c13.I * c23.J - 2 * c10.J * c12x2 * c12.J * c13.J * c23.I - 6 * c10.J * c13x2 * c21.J * c22.I * c13.J - c11.I * c11.J * c12x2 * c13.J * c23.J - 2 * c11.I * c11y2 * c13.I * c13.J * c23.I + 3 * c20.I * c11.J * c12.J * c13x2 * c23.J - 2 * c20.I * c12.I * c12y2 * c13.I * c23.J - 2 * c20.I * c12.I * c12y2 * c13.J * c23.I - 6 * c20.I * c20.J * c13.I * c13y2 * c23.I - 6 * c20.I * c21.I * c13.I * c13y2 * c22.J - 6 * c20.I * c13.I * c21.J * c22.I * c13y2 + 3 * c11.J * c20.J * c12.J * c13x2 * c23.I + 3 * c11.J * c21.I * c12.J * c13x2 * c22.J + 3 * c11.J * c12.J * c13x2 * c21.J * c22.I - 2 * c12.I * c20.J * c12y2 * c13.I * c23.I - 2 * c12.I * c21.I * c12y2 * c13.I * c22.J - 2 * c12.I * c21.I * c12y2 * c22.I * c13.J - 2 * c12.I * c12y2 * c13.I * c21.J * c22.I - 6 * c20.J * c21.I * c13.I * c22.I * c13y2 - c11y2 * c12.I * c12.J * c13.I * c23.I + 2 * c20.I * c12x2 * c12.J * c13.J * c23.J + 6 * c20.J * c13x2 * c21.J * c22.I * c13.J + 2 * c11x2 * c11.J * c13.I * c13.J * c23.J + c11x2 * c12.I * c12.J * c13.J * c23.J + 2 * c12x2 * c20.J * c12.J * c13.J * c23.I + 2 * c12x2 * c21.I * c12.J * c13.J * c22.J + 2 * c12x2 * c12.J * c21.J * c22.I * c13.J + c21x3 * c13y3 + 3 * c10x2 * c13y3 * c23.I - 3 * c10y2 * c13x3 * c23.J + 3 * c20x2 * c13y3 * c23.I + c11y3 * c13x2 * c23.I - c11x3 * c13y2 * c23.J - c11.I * c11y2 * c13x2 * c23.J + c11x2 * c11.J * c13y2 * c23.I - 3 * c10x2 * c13.I * c13y2 * c23.J + 3 * c10y2 * c13x2 * c13.J * c23.I - c11x2 * c12y2 * c13.I * c23.J + c11y2 * c12x2 * c13.J * c23.I - 3 * c21x2 * c13.I * c21.J * c13y2 - 3 * c20x2 * c13.I * c13y2 * c23.J + 3 * c20y2 * c13x2 * c13.J * c23.I + c11.I * c12.I * c13.I * c13.J * (6 * c20.J * c23.J + 6 * c21.J * c22.J) + c12x3 * c13.J * (-2 * c20.J * c23.J - 2 * c21.J * c22.J) + c10.J * c13x3 * (6 * c20.J * c23.J + 6 * c21.J * c22.J) + c11.J * c12.I * c13x2 * (-2 * c20.J * c23.J - 2 * c21.J * c22.J) + c12x2 * c12.J * c13.I * (2 * c20.J * c23.J + 2 * c21.J * c22.J) + c11.I * c12.J * c13x2 * (-4 * c20.J * c23.J - 4 * c21.J * c22.J) + c10.I * c13x2 * c13.J * (-6 * c20.J * c23.J - 6 * c21.J * c22.J) + c20.I * c13x2 * c13.J * (6 * c20.J * c23.J + 6 * c21.J * c22.J) + c21.I * c13x2 * c13.J * (6 * c20.J * c22.J + 3 * c21y2) + c13x3 * (-2 * c20.J * c21.J * c22.J - c20y2 * c23.J - c21.J * (2 * c20.J * c22.J + c21y2) - c20.J * (2 * c20.J * c23.J + 2 * c21.J * c22.J)),
                /* t^2 */ -c10.I * c11.I * c12.J * c13.I * c13.J * c22.J + c10.I * c11.J * c12.I * c13.I * c13.J * c22.J + 6 * c10.I * c11.J * c12.J * c13.I * c22.I * c13.J - 6 * c10.J * c11.I * c12.I * c13.I * c13.J * c22.J - c10.J * c11.I * c12.J * c13.I * c22.I * c13.J + c10.J * c11.J * c12.I * c13.I * c22.I * c13.J + c11.I * c11.J * c12.I * c12.J * c13.I * c22.J - c11.I * c11.J * c12.I * c12.J * c22.I * c13.J + c11.I * c20.I * c12.J * c13.I * c13.J * c22.J + c11.I * c20.J * c12.J * c13.I * c22.I * c13.J + c11.I * c21.I * c12.J * c13.I * c21.J * c13.J - c20.I * c11.J * c12.I * c13.I * c13.J * c22.J - 6 * c20.I * c11.J * c12.J * c13.I * c22.I * c13.J - c11.J * c12.I * c20.J * c13.I * c22.I * c13.J - c11.J * c12.I * c21.I * c13.I * c21.J * c13.J - 6 * c10.I * c20.I * c22.I * c13y3 - 2 * c10.I * c12y3 * c13.I * c22.I + 2 * c20.I * c12y3 * c13.I * c22.I + 2 * c10.J * c12x3 * c13.J * c22.J - 6 * c10.I * c10.J * c13.I * c22.I * c13y2 + 3 * c10.I * c11.I * c12.I * c13y2 * c22.J - 2 * c10.I * c11.I * c12.J * c22.I * c13y2 - 4 * c10.I * c11.J * c12.I * c22.I * c13y2 + 3 * c10.J * c11.I * c12.I * c22.I * c13y2 + 6 * c10.I * c10.J * c13x2 * c13.J * c22.J + 6 * c10.I * c20.I * c13.I * c13y2 * c22.J - 3 * c10.I * c11.J * c12.J * c13x2 * c22.J + 2 * c10.I * c12.I * c12y2 * c13.I * c22.J + 2 * c10.I * c12.I * c12y2 * c22.I * c13.J + 6 * c10.I * c20.J * c13.I * c22.I * c13y2 + 6 * c10.I * c21.I * c13.I * c21.J * c13y2 + 4 * c10.J * c11.I * c12.J * c13x2 * c22.J + 6 * c10.J * c20.I * c13.I * c22.I * c13y2 + 2 * c10.J * c11.J * c12.I * c13x2 * c22.J - 3 * c10.J * c11.J * c12.J * c13x2 * c22.I + 2 * c10.J * c12.I * c12y2 * c13.I * c22.I - 3 * c11.I * c20.I * c12.I * c13y2 * c22.J + 2 * c11.I * c20.I * c12.J * c22.I * c13y2 + c11.I * c11.J * c12y2 * c13.I * c22.I - 3 * c11.I * c12.I * c20.J * c22.I * c13y2 - 3 * c11.I * c12.I * c21.I * c21.J * c13y2 + 4 * c20.I * c11.J * c12.I * c22.I * c13y2 - 2 * c10.I * c12x2 * c12.J * c13.J * c22.J - 6 * c10.J * c20.I * c13x2 * c13.J * c22.J - 6 * c10.J * c20.J * c13x2 * c22.I * c13.J - 6 * c10.J * c21.I * c13x2 * c21.J * c13.J - 2 * c10.J * c12x2 * c12.J * c13.I * c22.J - 2 * c10.J * c12x2 * c12.J * c22.I * c13.J - c11.I * c11.J * c12x2 * c13.J * c22.J - 2 * c11.I * c11y2 * c13.I * c22.I * c13.J + 3 * c20.I * c11.J * c12.J * c13x2 * c22.J - 2 * c20.I * c12.I * c12y2 * c13.I * c22.J - 2 * c20.I * c12.I * c12y2 * c22.I * c13.J - 6 * c20.I * c20.J * c13.I * c22.I * c13y2 - 6 * c20.I * c21.I * c13.I * c21.J * c13y2 + 3 * c11.J * c20.J * c12.J * c13x2 * c22.I + 3 * c11.J * c21.I * c12.J * c13x2 * c21.J - 2 * c12.I * c20.J * c12y2 * c13.I * c22.I - 2 * c12.I * c21.I * c12y2 * c13.I * c21.J - c11y2 * c12.I * c12.J * c13.I * c22.I + 2 * c20.I * c12x2 * c12.J * c13.J * c22.J - 3 * c11.J * c21x2 * c12.J * c13.I * c13.J + 6 * c20.J * c21.I * c13x2 * c21.J * c13.J + 2 * c11x2 * c11.J * c13.I * c13.J * c22.J + c11x2 * c12.I * c12.J * c13.J * c22.J + 2 * c12x2 * c20.J * c12.J * c22.I * c13.J + 2 * c12x2 * c21.I * c12.J * c21.J * c13.J - 3 * c10.I * c21x2 * c13y3 + 3 * c20.I * c21x2 * c13y3 + 3 * c10x2 * c22.I * c13y3 - 3 * c10y2 * c13x3 * c22.J + 3 * c20x2 * c22.I * c13y3 + c21x2 * c12y3 * c13.I + c11y3 * c13x2 * c22.I - c11x3 * c13y2 * c22.J + 3 * c10.J * c21x2 * c13.I * c13y2 - c11.I * c11y2 * c13x2 * c22.J + c11.I * c21x2 * c12.J * c13y2 + 2 * c11.J * c12.I * c21x2 * c13y2 + c11x2 * c11.J * c22.I * c13y2 - c12.I * c21x2 * c12y2 * c13.J - 3 * c20.J * c21x2 * c13.I * c13y2 - 3 * c10x2 * c13.I * c13y2 * c22.J + 3 * c10y2 * c13x2 * c22.I * c13.J - c11x2 * c12y2 * c13.I * c22.J + c11y2 * c12x2 * c22.I * c13.J - 3 * c20x2 * c13.I * c13y2 * c22.J + 3 * c20y2 * c13x2 * c22.I * c13.J + c12x2 * c12.J * c13.I * (2 * c20.J * c22.J + c21y2) + c11.I * c12.I * c13.I * c13.J * (6 * c20.J * c22.J + 3 * c21y2) + c12x3 * c13.J * (-2 * c20.J * c22.J - c21y2) + c10.J * c13x3 * (6 * c20.J * c22.J + 3 * c21y2) + c11.J * c12.I * c13x2 * (-2 * c20.J * c22.J - c21y2) + c11.I * c12.J * c13x2 * (-4 * c20.J * c22.J - 2 * c21y2) + c10.I * c13x2 * c13.J * (-6 * c20.J * c22.J - 3 * c21y2) + c20.I * c13x2 * c13.J * (6 * c20.J * c22.J + 3 * c21y2) + c13x3 * (-2 * c20.J * c21y2 - c20y2 * c22.J - c20.J * (2 * c20.J * c22.J + c21y2)),
                /* t^1 */ -c10.I * c11.I * c12.J * c13.I * c21.J * c13.J + c10.I * c11.J * c12.I * c13.I * c21.J * c13.J + 6 * c10.I * c11.J * c21.I * c12.J * c13.I * c13.J - 6 * c10.J * c11.I * c12.I * c13.I * c21.J * c13.J - c10.J * c11.I * c21.I * c12.J * c13.I * c13.J + c10.J * c11.J * c12.I * c21.I * c13.I * c13.J - c11.I * c11.J * c12.I * c21.I * c12.J * c13.J + c11.I * c11.J * c12.I * c12.J * c13.I * c21.J + c11.I * c20.I * c12.J * c13.I * c21.J * c13.J + 6 * c11.I * c12.I * c20.J * c13.I * c21.J * c13.J + c11.I * c20.J * c21.I * c12.J * c13.I * c13.J - c20.I * c11.J * c12.I * c13.I * c21.J * c13.J - 6 * c20.I * c11.J * c21.I * c12.J * c13.I * c13.J - c11.J * c12.I * c20.J * c21.I * c13.I * c13.J - 6 * c10.I * c20.I * c21.I * c13y3 - 2 * c10.I * c21.I * c12y3 * c13.I + 6 * c10.J * c20.J * c13x3 * c21.J + 2 * c20.I * c21.I * c12y3 * c13.I + 2 * c10.J * c12x3 * c21.J * c13.J - 2 * c12x3 * c20.J * c21.J * c13.J - 6 * c10.I * c10.J * c21.I * c13.I * c13y2 + 3 * c10.I * c11.I * c12.I * c21.J * c13y2 - 2 * c10.I * c11.I * c21.I * c12.J * c13y2 - 4 * c10.I * c11.J * c12.I * c21.I * c13y2 + 3 * c10.J * c11.I * c12.I * c21.I * c13y2 + 6 * c10.I * c10.J * c13x2 * c21.J * c13.J + 6 * c10.I * c20.I * c13.I * c21.J * c13y2 - 3 * c10.I * c11.J * c12.J * c13x2 * c21.J + 2 * c10.I * c12.I * c21.I * c12y2 * c13.J + 2 * c10.I * c12.I * c12y2 * c13.I * c21.J + 6 * c10.I * c20.J * c21.I * c13.I * c13y2 + 4 * c10.J * c11.I * c12.J * c13x2 * c21.J + 6 * c10.J * c20.I * c21.I * c13.I * c13y2 + 2 * c10.J * c11.J * c12.I * c13x2 * c21.J - 3 * c10.J * c11.J * c21.I * c12.J * c13x2 + 2 * c10.J * c12.I * c21.I * c12y2 * c13.I - 3 * c11.I * c20.I * c12.I * c21.J * c13y2 + 2 * c11.I * c20.I * c21.I * c12.J * c13y2 + c11.I * c11.J * c21.I * c12y2 * c13.I - 3 * c11.I * c12.I * c20.J * c21.I * c13y2 + 4 * c20.I * c11.J * c12.I * c21.I * c13y2 - 6 * c10.I * c20.J * c13x2 * c21.J * c13.J - 2 * c10.I * c12x2 * c12.J * c21.J * c13.J - 6 * c10.J * c20.I * c13x2 * c21.J * c13.J - 6 * c10.J * c20.J * c21.I * c13x2 * c13.J - 2 * c10.J * c12x2 * c21.I * c12.J * c13.J - 2 * c10.J * c12x2 * c12.J * c13.I * c21.J - c11.I * c11.J * c12x2 * c21.J * c13.J - 4 * c11.I * c20.J * c12.J * c13x2 * c21.J - 2 * c11.I * c11y2 * c21.I * c13.I * c13.J + 3 * c20.I * c11.J * c12.J * c13x2 * c21.J - 2 * c20.I * c12.I * c21.I * c12y2 * c13.J - 2 * c20.I * c12.I * c12y2 * c13.I * c21.J - 6 * c20.I * c20.J * c21.I * c13.I * c13y2 - 2 * c11.J * c12.I * c20.J * c13x2 * c21.J + 3 * c11.J * c20.J * c21.I * c12.J * c13x2 - 2 * c12.I * c20.J * c21.I * c12y2 * c13.I - c11y2 * c12.I * c21.I * c12.J * c13.I + 6 * c20.I * c20.J * c13x2 * c21.J * c13.J + 2 * c20.I * c12x2 * c12.J * c21.J * c13.J + 2 * c11x2 * c11.J * c13.I * c21.J * c13.J + c11x2 * c12.I * c12.J * c21.J * c13.J + 2 * c12x2 * c20.J * c21.I * c12.J * c13.J + 2 * c12x2 * c20.J * c12.J * c13.I * c21.J + 3 * c10x2 * c21.I * c13y3 - 3 * c10y2 * c13x3 * c21.J + 3 * c20x2 * c21.I * c13y3 + c11y3 * c21.I * c13x2 - c11x3 * c21.J * c13y2 - 3 * c20y2 * c13x3 * c21.J - c11.I * c11y2 * c13x2 * c21.J + c11x2 * c11.J * c21.I * c13y2 - 3 * c10x2 * c13.I * c21.J * c13y2 + 3 * c10y2 * c21.I * c13x2 * c13.J - c11x2 * c12y2 * c13.I * c21.J + c11y2 * c12x2 * c21.I * c13.J - 3 * c20x2 * c13.I * c21.J * c13y2 + 3 * c20y2 * c21.I * c13x2 * c13.J,
                /* t^0 */ c10.I * c10.J * c11.I * c12.J * c13.I * c13.J - c10.I * c10.J * c11.J * c12.I * c13.I * c13.J + c10.I * c11.I * c11.J * c12.I * c12.J * c13.J - c10.J * c11.I * c11.J * c12.I * c12.J * c13.I - c10.I * c11.I * c20.J * c12.J * c13.I * c13.J + 6 * c10.I * c20.I * c11.J * c12.J * c13.I * c13.J + c10.I * c11.J * c12.I * c20.J * c13.I * c13.J - c10.J * c11.I * c20.I * c12.J * c13.I * c13.J - 6 * c10.J * c11.I * c12.I * c20.J * c13.I * c13.J + c10.J * c20.I * c11.J * c12.I * c13.I * c13.J - c11.I * c20.I * c11.J * c12.I * c12.J * c13.J + c11.I * c11.J * c12.I * c20.J * c12.J * c13.I + c11.I * c20.I * c20.J * c12.J * c13.I * c13.J - c20.I * c11.J * c12.I * c20.J * c13.I * c13.J - 2 * c10.I * c20.I * c12y3 * c13.I + 2 * c10.J * c12x3 * c20.J * c13.J - 3 * c10.I * c10.J * c11.I * c12.I * c13y2 - 6 * c10.I * c10.J * c20.I * c13.I * c13y2 + 3 * c10.I * c10.J * c11.J * c12.J * c13x2 - 2 * c10.I * c10.J * c12.I * c12y2 * c13.I - 2 * c10.I * c11.I * c20.I * c12.J * c13y2 - c10.I * c11.I * c11.J * c12y2 * c13.I + 3 * c10.I * c11.I * c12.I * c20.J * c13y2 - 4 * c10.I * c20.I * c11.J * c12.I * c13y2 + 3 * c10.J * c11.I * c20.I * c12.I * c13y2 + 6 * c10.I * c10.J * c20.J * c13x2 * c13.J + 2 * c10.I * c10.J * c12x2 * c12.J * c13.J + 2 * c10.I * c11.I * c11y2 * c13.I * c13.J + 2 * c10.I * c20.I * c12.I * c12y2 * c13.J + 6 * c10.I * c20.I * c20.J * c13.I * c13y2 - 3 * c10.I * c11.J * c20.J * c12.J * c13x2 + 2 * c10.I * c12.I * c20.J * c12y2 * c13.I + c10.I * c11y2 * c12.I * c12.J * c13.I + c10.J * c11.I * c11.J * c12x2 * c13.J + 4 * c10.J * c11.I * c20.J * c12.J * c13x2 - 3 * c10.J * c20.I * c11.J * c12.J * c13x2 + 2 * c10.J * c20.I * c12.I * c12y2 * c13.I + 2 * c10.J * c11.J * c12.I * c20.J * c13x2 + c11.I * c20.I * c11.J * c12y2 * c13.I - 3 * c11.I * c20.I * c12.I * c20.J * c13y2 - 2 * c10.I * c12x2 * c20.J * c12.J * c13.J - 6 * c10.J * c20.I * c20.J * c13x2 * c13.J - 2 * c10.J * c20.I * c12x2 * c12.J * c13.J - 2 * c10.J * c11x2 * c11.J * c13.I * c13.J - c10.J * c11x2 * c12.I * c12.J * c13.J - 2 * c10.J * c12x2 * c20.J * c12.J * c13.I - 2 * c11.I * c20.I * c11y2 * c13.I * c13.J - c11.I * c11.J * c12x2 * c20.J * c13.J + 3 * c20.I * c11.J * c20.J * c12.J * c13x2 - 2 * c20.I * c12.I * c20.J * c12y2 * c13.I - c20.I * c11y2 * c12.I * c12.J * c13.I + 3 * c10y2 * c11.I * c12.I * c13.I * c13.J + 3 * c11.I * c12.I * c20y2 * c13.I * c13.J + 2 * c20.I * c12x2 * c20.J * c12.J * c13.J - 3 * c10x2 * c11.J * c12.J * c13.I * c13.J + 2 * c11x2 * c11.J * c20.J * c13.I * c13.J + c11x2 * c12.I * c20.J * c12.J * c13.J - 3 * c20x2 * c11.J * c12.J * c13.I * c13.J - c10x3 * c13y3 + c10y3 * c13x3 + c20x3 * c13y3 - c20y3 * c13x3 - 3 * c10.I * c20x2 * c13y3 - c10.I * c11y3 * c13x2 + 3 * c10x2 * c20.I * c13y3 + c10.J * c11x3 * c13y2 + 3 * c10.J * c20y2 * c13x3 + c20.I * c11y3 * c13x2 + c10x2 * c12y3 * c13.I - 3 * c10y2 * c20.J * c13x3 - c10y2 * c12x3 * c13.J + c20x2 * c12y3 * c13.I - c11x3 * c20.J * c13y2 - c12x3 * c20y2 * c13.J - c10.I * c11x2 * c11.J * c13y2 + c10.J * c11.I * c11y2 * c13x2 - 3 * c10.I * c10y2 * c13x2 * c13.J - c10.I * c11y2 * c12x2 * c13.J + c10.J * c11x2 * c12y2 * c13.I - c11.I * c11y2 * c20.J * c13x2 + 3 * c10x2 * c10.J * c13.I * c13y2 + c10x2 * c11.I * c12.J * c13y2 + 2 * c10x2 * c11.J * c12.I * c13y2 - 2 * c10y2 * c11.I * c12.J * c13x2 - c10y2 * c11.J * c12.I * c13x2 + c11x2 * c20.I * c11.J * c13y2 - 3 * c10.I * c20y2 * c13x2 * c13.J + 3 * c10.J * c20x2 * c13.I * c13y2 + c11.I * c20x2 * c12.J * c13y2 - 2 * c11.I * c20y2 * c12.J * c13x2 + c20.I * c11y2 * c12x2 * c13.J - c11.J * c12.I * c20y2 * c13x2 - c10x2 * c12.I * c12y2 * c13.J - 3 * c10x2 * c20.J * c13.I * c13y2 + 3 * c10y2 * c20.I * c13x2 * c13.J + c10y2 * c12x2 * c12.J * c13.I - c11x2 * c20.J * c12y2 * c13.I + 2 * c20x2 * c11.J * c12.I * c13y2 + 3 * c20.I * c20y2 * c13x2 * c13.J - c20x2 * c12.I * c12y2 * c13.J - 3 * c20x2 * c20.J * c13.I * c13y2 + c12x2 * c20y2 * c12.J * c13.I
                ).Trim().RootsInInterval();

            var result = new Intersection(IntersectionState.NoIntersection);

            for (var i = 0; i < roots.Length; i++)
            {
                var s = roots[i];
                var xRoots = CubicRootsTests.CubicRootsKevinLinDev(
                    c13.I,
                    c12.I,
                    c11.I,
                    c10.I - c20.I - s * c21.I - s * s * c22.I - s * s * s * c23.I,
                    epsilon);
                var yRoots = CubicRootsTests.CubicRootsKevinLinDev(
                    c13.J,
                    c12.J,
                    c11.J,
                    c10.J - c20.J - s * c21.J - s * s * c22.J - s * s * s * c23.J,
                    epsilon);
                if (xRoots.Count > 0 && yRoots.Count > 0)
                {
                    for (var j = 0; j < xRoots.Count; j++)
                    {
                        var xRoot = xRoots[j];
                        if (0 <= xRoot && xRoot <= 1)
                        {
                            for (var k = 0; k < yRoots.Count; k++)
                            {
                                if (Abs(xRoot - yRoots[k]) < epsilon)
                                {
                                    result.Points.Add((Point2D)c23 * (s * s * s) + (c22 * s * s + (c21 * s + c20)));
                                    goto checkRoots;
                                }
                            }
                        }
                    }
                checkRoots:;
                }
            }

            if (result.Points.Count > 0)
            {
                result.State = IntersectionState.Intersection;
            }

            return result;
        }

        /// <summary>
        /// Find the intersection between two cubic Bezier curves.
        /// </summary>
        /// <param name="a1X"></param>
        /// <param name="a1Y"></param>
        /// <param name="a2X"></param>
        /// <param name="a2Y"></param>
        /// <param name="a3X"></param>
        /// <param name="a3Y"></param>
        /// <param name="a4X"></param>
        /// <param name="a4Y"></param>
        /// <param name="b1X"></param>
        /// <param name="b1Y"></param>
        /// <param name="b2X"></param>
        /// <param name="b2Y"></param>
        /// <param name="b3X"></param>
        /// <param name="b3Y"></param>
        /// <param name="b4X"></param>
        /// <param name="b4Y"></param>
        /// <param name="epsilon">The <paramref name="epsilon"/> or minimal value to represent a change.</param>
        /// <returns></returns>
        /// <acknowledgment>
        /// This is a performance improved rewrite of a method ported from: http://www.kevlindev.com/ also found at: https://github.com/thelonious/kld-intersections/
        /// </acknowledgment>
        [DisplayName("Cubic Bezier Segment Cubic Bezier Segment Intersection")]
        [Description("Find the intersection between two Cubic Bezier curves.")]
        [Acknowledgment("http://www.kevlindev.com/", "https://github.com/thelonious/kld-intersections/")]
        [SourceCodeLocationProvider]
        //[DebuggerStepThrough]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static Intersection CubicBezierSegmentCubicBezierSegmentIntersection2(
            double a1X, double a1Y, double a2X, double a2Y, double a3X, double a3Y, double a4X, double a4Y,
            double b1X, double b1Y, double b2X, double b2Y, double b3X, double b3Y, double b4X, double b4Y, double epsilon = Epsilon)
        {
            var result = new Intersection(IntersectionState.NoIntersection);

            // ToDo: Break early if the AABB bounding box of the curve does not intersect.

            var c13 = new Vector2D(a4X - a3X * 3 + a2X * 3 - a1X, a4Y - a3Y * 3 + a2Y * 3 - a1Y);
            var c12 = new Vector2D(3 * (a3X - a2X * 2 + a1X), 3 * (a3Y - a2Y * 2 + a1Y));
            var c11 = new Vector2D(3 * (a2X - a1X), 3 * (a2Y - a1Y));
            var c23 = new Vector2D(b4X - b3X * 3 + b2X * 3 - b1X * 1, b4Y - b3Y * 3 + b2Y * 3 - b1Y * 1);
            var c22 = new Vector2D(3 * (b3X - b2X * 2 + b1X), 3 * (b3Y - b2Y * 2 + b1Y));
            var c21 = new Vector2D(3 * (b2X - b1X), 3 * (b2Y - b1Y));

            var c10x2 = a1X * a1X;
            var c10x3 = a1X * a1X * a1X;
            var c10y2 = a1Y * a1Y;
            var c10y3 = a1Y * a1Y * a1Y;
            var c11x2 = c11.I * c11.I;
            var c11x3 = c11.I * c11.I * c11.I;
            var c11y2 = c11.J * c11.J;
            var c11y3 = c11.J * c11.J * c11.J;
            var c12x2 = c12.I * c12.I;
            var c12x3 = c12.I * c12.I * c12.I;
            var c12y2 = c12.J * c12.J;
            var c12y3 = c12.J * c12.J * c12.J;
            var c13x2 = c13.I * c13.I;
            var c13x3 = c13.I * c13.I * c13.I;
            var c13y2 = c13.J * c13.J;
            var c13y3 = c13.J * c13.J * c13.J;

            var c20x2 = b1X * b1X;
            var c20x3 = b1X * b1X * b1X;
            var c20y2 = b1Y * b1Y;
            var c20y3 = b1Y * b1Y * b1Y;
            var c21x2 = c21.I * c21.I;
            var c21x3 = c21.I * c21.I * c21.I;
            var c21y2 = c21.J * c21.J;
            var c22x2 = c22.I * c22.I;
            var c22x3 = c22.I * c22.I * c22.I;
            var c22y2 = c22.J * c22.J;
            var c23x2 = c23.I * c23.I;
            var c23x3 = c23.I * c23.I * c23.I;
            var c23y2 = c23.J * c23.J;
            var c23y3 = c23.J * c23.J * c23.J;

            var poly = new Polynomial(
                /* t^0 */ -c13x3 * c23y3 + c13y3 * c23x3 - 3 * c13.I * c13y2 * c23x2 * c23.J + 3 * c13x2 * c13.J * c23.I * c23y2,
                /* t^1 */ -6 * c13.I * c22.I * c13y2 * c23.I * c23.J + 6 * c13x2 * c13.J * c22.J * c23.I * c23.J + 3 * c22.I * c13y3 * c23x2 - 3 * c13x3 * c22.J * c23y2 - 3 * c13.I * c13y2 * c22.J * c23x2 + 3 * c13x2 * c22.I * c13.J * c23y2,
                /* t^2 */ -6 * c21.I * c13.I * c13y2 * c23.I * c23.J - 6 * c13.I * c22.I * c13y2 * c22.J * c23.I + 6 * c13x2 * c22.I * c13.J * c22.J * c23.J + 3 * c21.I * c13y3 * c23x2 + 3 * c22x2 * c13y3 * c23.I + 3 * c21.I * c13x2 * c13.J * c23y2 - 3 * c13.I * c21.J * c13y2 * c23x2 - 3 * c13.I * c22x2 * c13y2 * c23.J + c13x2 * c13.J * c23.I * (6 * c21.J * c23.J + 3 * c22y2) + c13x3 * (-c21.J * c23y2 - 2 * c22y2 * c23.J - c23.J * (2 * c21.J * c23.J + c22y2)),
                /* t^3 */ c11.I * c12.J * c13.I * c13.J * c23.I * c23.J - c11.J * c12.I * c13.I * c13.J * c23.I * c23.J + 6 * c21.I * c22.I * c13y3 * c23.I + 3 * c11.I * c12.I * c13.I * c13.J * c23y2 + 6 * a1X * c13.I * c13y2 * c23.I * c23.J - 3 * c11.I * c12.I * c13y2 * c23.I * c23.J - 3 * c11.J * c12.J * c13.I * c13.J * c23x2 - 6 * a1Y * c13x2 * c13.J * c23.I * c23.J - 6 * b1X * c13.I * c13y2 * c23.I * c23.J + 3 * c11.J * c12.J * c13x2 * c23.I * c23.J - 2 * c12.I * c12y2 * c13.I * c23.I * c23.J - 6 * c21.I * c13.I * c22.I * c13y2 * c23.J - 6 * c21.I * c13.I * c13y2 * c22.J * c23.I - 6 * c13.I * c21.J * c22.I * c13y2 * c23.I + 6 * c21.I * c13x2 * c13.J * c22.J * c23.J + 2 * c12x2 * c12.J * c13.J * c23.I * c23.J + c22x3 * c13y3 - 3 * a1X * c13y3 * c23x2 + 3 * a1Y * c13x3 * c23y2 + 3 * b1X * c13y3 * c23x2 + c12y3 * c13.I * c23x2 - c12x3 * c13.J * c23y2 - 3 * a1X * c13x2 * c13.J * c23y2 + 3 * a1Y * c13.I * c13y2 * c23x2 - 2 * c11.I * c12.J * c13x2 * c23y2 + c11.I * c12.J * c13y2 * c23x2 - c11.J * c12.I * c13x2 * c23y2 + 2 * c11.J * c12.I * c13y2 * c23x2 + 3 * b1X * c13x2 * c13.J * c23y2 - c12.I * c12y2 * c13.J * c23x2 - 3 * b1Y * c13.I * c13y2 * c23x2 + c12x2 * c12.J * c13.I * c23y2 - 3 * c13.I * c22x2 * c13y2 * c22.J + c13x2 * c13.J * c23.I * (6 * b1Y * c23.J + 6 * c21.J * c22.J) + c13x2 * c22.I * c13.J * (6 * c21.J * c23.J + 3 * c22y2) + c13x3 * (-2 * c21.J * c22.J * c23.J - b1Y * c23y2 - c22.J * (2 * c21.J * c23.J + c22y2) - c23.J * (2 * b1Y * c23.J + 2 * c21.J * c22.J)),
                /* t^4 */ 6 * c11.I * c12.I * c13.I * c13.J * c22.J * c23.J + c11.I * c12.J * c13.I * c22.I * c13.J * c23.J + c11.I * c12.J * c13.I * c13.J * c22.J * c23.I - c11.J * c12.I * c13.I * c22.I * c13.J * c23.J - c11.J * c12.I * c13.I * c13.J * c22.J * c23.I - 6 * c11.J * c12.J * c13.I * c22.I * c13.J * c23.I - 6 * a1X * c22.I * c13y3 * c23.I + 6 * b1X * c22.I * c13y3 * c23.I + 6 * a1Y * c13x3 * c22.J * c23.J + 2 * c12y3 * c13.I * c22.I * c23.I - 2 * c12x3 * c13.J * c22.J * c23.J + 6 * a1X * c13.I * c22.I * c13y2 * c23.J + 6 * a1X * c13.I * c13y2 * c22.J * c23.I + 6 * a1Y * c13.I * c22.I * c13y2 * c23.I - 3 * c11.I * c12.I * c22.I * c13y2 * c23.J - 3 * c11.I * c12.I * c13y2 * c22.J * c23.I + 2 * c11.I * c12.J * c22.I * c13y2 * c23.I + 4 * c11.J * c12.I * c22.I * c13y2 * c23.I - 6 * a1X * c13x2 * c13.J * c22.J * c23.J - 6 * a1Y * c13x2 * c22.I * c13.J * c23.J - 6 * a1Y * c13x2 * c13.J * c22.J * c23.I - 4 * c11.I * c12.J * c13x2 * c22.J * c23.J - 6 * b1X * c13.I * c22.I * c13y2 * c23.J - 6 * b1X * c13.I * c13y2 * c22.J * c23.I - 2 * c11.J * c12.I * c13x2 * c22.J * c23.J + 3 * c11.J * c12.J * c13x2 * c22.I * c23.J + 3 * c11.J * c12.J * c13x2 * c22.J * c23.I - 2 * c12.I * c12y2 * c13.I * c22.I * c23.J - 2 * c12.I * c12y2 * c13.I * c22.J * c23.I - 2 * c12.I * c12y2 * c22.I * c13.J * c23.I - 6 * b1Y * c13.I * c22.I * c13y2 * c23.I - 6 * c21.I * c13.I * c21.J * c13y2 * c23.I - 6 * c21.I * c13.I * c22.I * c13y2 * c22.J + 6 * b1X * c13x2 * c13.J * c22.J * c23.J + 2 * c12x2 * c12.J * c13.I * c22.J * c23.J + 2 * c12x2 * c12.J * c22.I * c13.J * c23.J + 2 * c12x2 * c12.J * c13.J * c22.J * c23.I + 3 * c21.I * c22x2 * c13y3 + 3 * c21x2 * c13y3 * c23.I - 3 * c13.I * c21.J * c22x2 * c13y2 - 3 * c21x2 * c13.I * c13y2 * c23.J + c13x2 * c22.I * c13.J * (6 * b1Y * c23.J + 6 * c21.J * c22.J) + c13x2 * c13.J * c23.I * (6 * b1Y * c22.J + 3 * c21y2) + c21.I * c13x2 * c13.J * (6 * c21.J * c23.J + 3 * c22y2) + c13x3 * (-2 * b1Y * c22.J * c23.J - c23.J * (2 * b1Y * c22.J + c21y2) - c21.J * (2 * c21.J * c23.J + c22y2) - c22.J * (2 * b1Y * c23.J + 2 * c21.J * c22.J)),
                /* t^5 */ c11.I * c21.I * c12.J * c13.I * c13.J * c23.J + c11.I * c12.J * c13.I * c21.J * c13.J * c23.I + c11.I * c12.J * c13.I * c22.I * c13.J * c22.J - c11.J * c12.I * c21.I * c13.I * c13.J * c23.J - c11.J * c12.I * c13.I * c21.J * c13.J * c23.I - c11.J * c12.I * c13.I * c22.I * c13.J * c22.J - 6 * c11.J * c21.I * c12.J * c13.I * c13.J * c23.I - 6 * a1X * c21.I * c13y3 * c23.I + 6 * b1X * c21.I * c13y3 * c23.I + 2 * c21.I * c12y3 * c13.I * c23.I + 6 * a1X * c21.I * c13.I * c13y2 * c23.J + 6 * a1X * c13.I * c21.J * c13y2 * c23.I + 6 * a1X * c13.I * c22.I * c13y2 * c22.J + 6 * a1Y * c21.I * c13.I * c13y2 * c23.I - 3 * c11.I * c12.I * c21.I * c13y2 * c23.J - 3 * c11.I * c12.I * c21.J * c13y2 * c23.I - 3 * c11.I * c12.I * c22.I * c13y2 * c22.J + 2 * c11.I * c21.I * c12.J * c13y2 * c23.I + 4 * c11.J * c12.I * c21.I * c13y2 * c23.I - 6 * a1Y * c21.I * c13x2 * c13.J * c23.J - 6 * a1Y * c13x2 * c21.J * c13.J * c23.I - 6 * a1Y * c13x2 * c22.I * c13.J * c22.J - 6 * b1X * c21.I * c13.I * c13y2 * c23.J - 6 * b1X * c13.I * c21.J * c13y2 * c23.I - 6 * b1X * c13.I * c22.I * c13y2 * c22.J + 3 * c11.J * c21.I * c12.J * c13x2 * c23.J - 3 * c11.J * c12.J * c13.I * c22x2 * c13.J + 3 * c11.J * c12.J * c13x2 * c21.J * c23.I + 3 * c11.J * c12.J * c13x2 * c22.I * c22.J - 2 * c12.I * c21.I * c12y2 * c13.I * c23.J - 2 * c12.I * c21.I * c12y2 * c13.J * c23.I - 2 * c12.I * c12y2 * c13.I * c21.J * c23.I - 2 * c12.I * c12y2 * c13.I * c22.I * c22.J - 6 * b1Y * c21.I * c13.I * c13y2 * c23.I - 6 * c21.I * c13.I * c21.J * c22.I * c13y2 + 6 * b1Y * c13x2 * c21.J * c13.J * c23.I + 2 * c12x2 * c21.I * c12.J * c13.J * c23.J + 2 * c12x2 * c12.J * c21.J * c13.J * c23.I + 2 * c12x2 * c12.J * c22.I * c13.J * c22.J - 3 * a1X * c22x2 * c13y3 + 3 * b1X * c22x2 * c13y3 + 3 * c21x2 * c22.I * c13y3 + c12y3 * c13.I * c22x2 + 3 * a1Y * c13.I * c22x2 * c13y2 + c11.I * c12.J * c22x2 * c13y2 + 2 * c11.J * c12.I * c22x2 * c13y2 - c12.I * c12y2 * c22x2 * c13.J - 3 * b1Y * c13.I * c22x2 * c13y2 - 3 * c21x2 * c13.I * c13y2 * c22.J + c12x2 * c12.J * c13.I * (2 * c21.J * c23.J + c22y2) + c11.I * c12.I * c13.I * c13.J * (6 * c21.J * c23.J + 3 * c22y2) + c21.I * c13x2 * c13.J * (6 * b1Y * c23.J + 6 * c21.J * c22.J) + c12x3 * c13.J * (-2 * c21.J * c23.J - c22y2) + a1Y * c13x3 * (6 * c21.J * c23.J + 3 * c22y2) + c11.J * c12.I * c13x2 * (-2 * c21.J * c23.J - c22y2) + c11.I * c12.J * c13x2 * (-4 * c21.J * c23.J - 2 * c22y2) + a1X * c13x2 * c13.J * (-6 * c21.J * c23.J - 3 * c22y2) + c13x2 * c22.I * c13.J * (6 * b1Y * c22.J + 3 * c21y2) + b1X * c13x2 * c13.J * (6 * c21.J * c23.J + 3 * c22y2) + c13x3 * (-2 * b1Y * c21.J * c23.J - c22.J * (2 * b1Y * c22.J + c21y2) - b1Y * (2 * c21.J * c23.J + c22y2) - c21.J * (2 * b1Y * c23.J + 2 * c21.J * c22.J)),
                /* t^6 */ -a1X * c11.I * c12.J * c13.I * c13.J * c23.J + a1X * c11.J * c12.I * c13.I * c13.J * c23.J + 6 * a1X * c11.J * c12.J * c13.I * c13.J * c23.I - 6 * a1Y * c11.I * c12.I * c13.I * c13.J * c23.J - a1Y * c11.I * c12.J * c13.I * c13.J * c23.I + a1Y * c11.J * c12.I * c13.I * c13.J * c23.I + c11.I * c11.J * c12.I * c12.J * c13.I * c23.J - c11.I * c11.J * c12.I * c12.J * c13.J * c23.I + c11.I * b1X * c12.J * c13.I * c13.J * c23.J + c11.I * b1Y * c12.J * c13.I * c13.J * c23.I + c11.I * c21.I * c12.J * c13.I * c13.J * c22.J + c11.I * c12.J * c13.I * c21.J * c22.I * c13.J - b1X * c11.J * c12.I * c13.I * c13.J * c23.J - 6 * b1X * c11.J * c12.J * c13.I * c13.J * c23.I - c11.J * c12.I * b1Y * c13.I * c13.J * c23.I - c11.J * c12.I * c21.I * c13.I * c13.J * c22.J - c11.J * c12.I * c13.I * c21.J * c22.I * c13.J - 6 * c11.J * c21.I * c12.J * c13.I * c22.I * c13.J - 6 * a1X * b1X * c13y3 * c23.I - 6 * a1X * c21.I * c22.I * c13y3 - 2 * a1X * c12y3 * c13.I * c23.I + 6 * b1X * c21.I * c22.I * c13y3 + 2 * b1X * c12y3 * c13.I * c23.I + 2 * c21.I * c12y3 * c13.I * c22.I + 2 * a1Y * c12x3 * c13.J * c23.J - 6 * a1X * a1Y * c13.I * c13y2 * c23.I + 3 * a1X * c11.I * c12.I * c13y2 * c23.J - 2 * a1X * c11.I * c12.J * c13y2 * c23.I - 4 * a1X * c11.J * c12.I * c13y2 * c23.I + 3 * a1Y * c11.I * c12.I * c13y2 * c23.I + 6 * a1X * a1Y * c13x2 * c13.J * c23.J + 6 * a1X * b1X * c13.I * c13y2 * c23.J - 3 * a1X * c11.J * c12.J * c13x2 * c23.J + 2 * a1X * c12.I * c12y2 * c13.I * c23.J + 2 * a1X * c12.I * c12y2 * c13.J * c23.I + 6 * a1X * b1Y * c13.I * c13y2 * c23.I + 6 * a1X * c21.I * c13.I * c13y2 * c22.J + 6 * a1X * c13.I * c21.J * c22.I * c13y2 + 4 * a1Y * c11.I * c12.J * c13x2 * c23.J + 6 * a1Y * b1X * c13.I * c13y2 * c23.I + 2 * a1Y * c11.J * c12.I * c13x2 * c23.J - 3 * a1Y * c11.J * c12.J * c13x2 * c23.I + 2 * a1Y * c12.I * c12y2 * c13.I * c23.I + 6 * a1Y * c21.I * c13.I * c22.I * c13y2 - 3 * c11.I * b1X * c12.I * c13y2 * c23.J + 2 * c11.I * b1X * c12.J * c13y2 * c23.I + c11.I * c11.J * c12y2 * c13.I * c23.I - 3 * c11.I * c12.I * b1Y * c13y2 * c23.I - 3 * c11.I * c12.I * c21.I * c13y2 * c22.J - 3 * c11.I * c12.I * c21.J * c22.I * c13y2 + 2 * c11.I * c21.I * c12.J * c22.I * c13y2 + 4 * b1X * c11.J * c12.I * c13y2 * c23.I + 4 * c11.J * c12.I * c21.I * c22.I * c13y2 - 2 * a1X * c12x2 * c12.J * c13.J * c23.J - 6 * a1Y * b1X * c13x2 * c13.J * c23.J - 6 * a1Y * b1Y * c13x2 * c13.J * c23.I - 6 * a1Y * c21.I * c13x2 * c13.J * c22.J - 2 * a1Y * c12x2 * c12.J * c13.I * c23.J - 2 * a1Y * c12x2 * c12.J * c13.J * c23.I - 6 * a1Y * c13x2 * c21.J * c22.I * c13.J - c11.I * c11.J * c12x2 * c13.J * c23.J - 2 * c11.I * c11y2 * c13.I * c13.J * c23.I + 3 * b1X * c11.J * c12.J * c13x2 * c23.J - 2 * b1X * c12.I * c12y2 * c13.I * c23.J - 2 * b1X * c12.I * c12y2 * c13.J * c23.I - 6 * b1X * b1Y * c13.I * c13y2 * c23.I - 6 * b1X * c21.I * c13.I * c13y2 * c22.J - 6 * b1X * c13.I * c21.J * c22.I * c13y2 + 3 * c11.J * b1Y * c12.J * c13x2 * c23.I + 3 * c11.J * c21.I * c12.J * c13x2 * c22.J + 3 * c11.J * c12.J * c13x2 * c21.J * c22.I - 2 * c12.I * b1Y * c12y2 * c13.I * c23.I - 2 * c12.I * c21.I * c12y2 * c13.I * c22.J - 2 * c12.I * c21.I * c12y2 * c22.I * c13.J - 2 * c12.I * c12y2 * c13.I * c21.J * c22.I - 6 * b1Y * c21.I * c13.I * c22.I * c13y2 - c11y2 * c12.I * c12.J * c13.I * c23.I + 2 * b1X * c12x2 * c12.J * c13.J * c23.J + 6 * b1Y * c13x2 * c21.J * c22.I * c13.J + 2 * c11x2 * c11.J * c13.I * c13.J * c23.J + c11x2 * c12.I * c12.J * c13.J * c23.J + 2 * c12x2 * b1Y * c12.J * c13.J * c23.I + 2 * c12x2 * c21.I * c12.J * c13.J * c22.J + 2 * c12x2 * c12.J * c21.J * c22.I * c13.J + c21x3 * c13y3 + 3 * c10x2 * c13y3 * c23.I - 3 * c10y2 * c13x3 * c23.J + 3 * c20x2 * c13y3 * c23.I + c11y3 * c13x2 * c23.I - c11x3 * c13y2 * c23.J - c11.I * c11y2 * c13x2 * c23.J + c11x2 * c11.J * c13y2 * c23.I - 3 * c10x2 * c13.I * c13y2 * c23.J + 3 * c10y2 * c13x2 * c13.J * c23.I - c11x2 * c12y2 * c13.I * c23.J + c11y2 * c12x2 * c13.J * c23.I - 3 * c21x2 * c13.I * c21.J * c13y2 - 3 * c20x2 * c13.I * c13y2 * c23.J + 3 * c20y2 * c13x2 * c13.J * c23.I + c11.I * c12.I * c13.I * c13.J * (6 * b1Y * c23.J + 6 * c21.J * c22.J) + c12x3 * c13.J * (-2 * b1Y * c23.J - 2 * c21.J * c22.J) + a1Y * c13x3 * (6 * b1Y * c23.J + 6 * c21.J * c22.J) + c11.J * c12.I * c13x2 * (-2 * b1Y * c23.J - 2 * c21.J * c22.J) + c12x2 * c12.J * c13.I * (2 * b1Y * c23.J + 2 * c21.J * c22.J) + c11.I * c12.J * c13x2 * (-4 * b1Y * c23.J - 4 * c21.J * c22.J) + a1X * c13x2 * c13.J * (-6 * b1Y * c23.J - 6 * c21.J * c22.J) + b1X * c13x2 * c13.J * (6 * b1Y * c23.J + 6 * c21.J * c22.J) + c21.I * c13x2 * c13.J * (6 * b1Y * c22.J + 3 * c21y2) + c13x3 * (-2 * b1Y * c21.J * c22.J - c20y2 * c23.J - c21.J * (2 * b1Y * c22.J + c21y2) - b1Y * (2 * b1Y * c23.J + 2 * c21.J * c22.J)),
                /* t^7 */ -a1X * c11.I * c12.J * c13.I * c13.J * c22.J + a1X * c11.J * c12.I * c13.I * c13.J * c22.J + 6 * a1X * c11.J * c12.J * c13.I * c22.I * c13.J - 6 * a1Y * c11.I * c12.I * c13.I * c13.J * c22.J - a1Y * c11.I * c12.J * c13.I * c22.I * c13.J + a1Y * c11.J * c12.I * c13.I * c22.I * c13.J + c11.I * c11.J * c12.I * c12.J * c13.I * c22.J - c11.I * c11.J * c12.I * c12.J * c22.I * c13.J + c11.I * b1X * c12.J * c13.I * c13.J * c22.J + c11.I * b1Y * c12.J * c13.I * c22.I * c13.J + c11.I * c21.I * c12.J * c13.I * c21.J * c13.J - b1X * c11.J * c12.I * c13.I * c13.J * c22.J - 6 * b1X * c11.J * c12.J * c13.I * c22.I * c13.J - c11.J * c12.I * b1Y * c13.I * c22.I * c13.J - c11.J * c12.I * c21.I * c13.I * c21.J * c13.J - 6 * a1X * b1X * c22.I * c13y3 - 2 * a1X * c12y3 * c13.I * c22.I + 2 * b1X * c12y3 * c13.I * c22.I + 2 * a1Y * c12x3 * c13.J * c22.J - 6 * a1X * a1Y * c13.I * c22.I * c13y2 + 3 * a1X * c11.I * c12.I * c13y2 * c22.J - 2 * a1X * c11.I * c12.J * c22.I * c13y2 - 4 * a1X * c11.J * c12.I * c22.I * c13y2 + 3 * a1Y * c11.I * c12.I * c22.I * c13y2 + 6 * a1X * a1Y * c13x2 * c13.J * c22.J + 6 * a1X * b1X * c13.I * c13y2 * c22.J - 3 * a1X * c11.J * c12.J * c13x2 * c22.J + 2 * a1X * c12.I * c12y2 * c13.I * c22.J + 2 * a1X * c12.I * c12y2 * c22.I * c13.J + 6 * a1X * b1Y * c13.I * c22.I * c13y2 + 6 * a1X * c21.I * c13.I * c21.J * c13y2 + 4 * a1Y * c11.I * c12.J * c13x2 * c22.J + 6 * a1Y * b1X * c13.I * c22.I * c13y2 + 2 * a1Y * c11.J * c12.I * c13x2 * c22.J - 3 * a1Y * c11.J * c12.J * c13x2 * c22.I + 2 * a1Y * c12.I * c12y2 * c13.I * c22.I - 3 * c11.I * b1X * c12.I * c13y2 * c22.J + 2 * c11.I * b1X * c12.J * c22.I * c13y2 + c11.I * c11.J * c12y2 * c13.I * c22.I - 3 * c11.I * c12.I * b1Y * c22.I * c13y2 - 3 * c11.I * c12.I * c21.I * c21.J * c13y2 + 4 * b1X * c11.J * c12.I * c22.I * c13y2 - 2 * a1X * c12x2 * c12.J * c13.J * c22.J - 6 * a1Y * b1X * c13x2 * c13.J * c22.J - 6 * a1Y * b1Y * c13x2 * c22.I * c13.J - 6 * a1Y * c21.I * c13x2 * c21.J * c13.J - 2 * a1Y * c12x2 * c12.J * c13.I * c22.J - 2 * a1Y * c12x2 * c12.J * c22.I * c13.J - c11.I * c11.J * c12x2 * c13.J * c22.J - 2 * c11.I * c11y2 * c13.I * c22.I * c13.J + 3 * b1X * c11.J * c12.J * c13x2 * c22.J - 2 * b1X * c12.I * c12y2 * c13.I * c22.J - 2 * b1X * c12.I * c12y2 * c22.I * c13.J - 6 * b1X * b1Y * c13.I * c22.I * c13y2 - 6 * b1X * c21.I * c13.I * c21.J * c13y2 + 3 * c11.J * b1Y * c12.J * c13x2 * c22.I + 3 * c11.J * c21.I * c12.J * c13x2 * c21.J - 2 * c12.I * b1Y * c12y2 * c13.I * c22.I - 2 * c12.I * c21.I * c12y2 * c13.I * c21.J - c11y2 * c12.I * c12.J * c13.I * c22.I + 2 * b1X * c12x2 * c12.J * c13.J * c22.J - 3 * c11.J * c21x2 * c12.J * c13.I * c13.J + 6 * b1Y * c21.I * c13x2 * c21.J * c13.J + 2 * c11x2 * c11.J * c13.I * c13.J * c22.J + c11x2 * c12.I * c12.J * c13.J * c22.J + 2 * c12x2 * b1Y * c12.J * c22.I * c13.J + 2 * c12x2 * c21.I * c12.J * c21.J * c13.J - 3 * a1X * c21x2 * c13y3 + 3 * b1X * c21x2 * c13y3 + 3 * c10x2 * c22.I * c13y3 - 3 * c10y2 * c13x3 * c22.J + 3 * c20x2 * c22.I * c13y3 + c21x2 * c12y3 * c13.I + c11y3 * c13x2 * c22.I - c11x3 * c13y2 * c22.J + 3 * a1Y * c21x2 * c13.I * c13y2 - c11.I * c11y2 * c13x2 * c22.J + c11.I * c21x2 * c12.J * c13y2 + 2 * c11.J * c12.I * c21x2 * c13y2 + c11x2 * c11.J * c22.I * c13y2 - c12.I * c21x2 * c12y2 * c13.J - 3 * b1Y * c21x2 * c13.I * c13y2 - 3 * c10x2 * c13.I * c13y2 * c22.J + 3 * c10y2 * c13x2 * c22.I * c13.J - c11x2 * c12y2 * c13.I * c22.J + c11y2 * c12x2 * c22.I * c13.J - 3 * c20x2 * c13.I * c13y2 * c22.J + 3 * c20y2 * c13x2 * c22.I * c13.J + c12x2 * c12.J * c13.I * (2 * b1Y * c22.J + c21y2) + c11.I * c12.I * c13.I * c13.J * (6 * b1Y * c22.J + 3 * c21y2) + c12x3 * c13.J * (-2 * b1Y * c22.J - c21y2) + a1Y * c13x3 * (6 * b1Y * c22.J + 3 * c21y2) + c11.J * c12.I * c13x2 * (-2 * b1Y * c22.J - c21y2) + c11.I * c12.J * c13x2 * (-4 * b1Y * c22.J - 2 * c21y2) + a1X * c13x2 * c13.J * (-6 * b1Y * c22.J - 3 * c21y2) + b1X * c13x2 * c13.J * (6 * b1Y * c22.J + 3 * c21y2) + c13x3 * (-2 * b1Y * c21y2 - c20y2 * c22.J - b1Y * (2 * b1Y * c22.J + c21y2)),
                /* t^8 */ -a1X * c11.I * c12.J * c13.I * c21.J * c13.J + a1X * c11.J * c12.I * c13.I * c21.J * c13.J + 6 * a1X * c11.J * c21.I * c12.J * c13.I * c13.J - 6 * a1Y * c11.I * c12.I * c13.I * c21.J * c13.J - a1Y * c11.I * c21.I * c12.J * c13.I * c13.J + a1Y * c11.J * c12.I * c21.I * c13.I * c13.J - c11.I * c11.J * c12.I * c21.I * c12.J * c13.J + c11.I * c11.J * c12.I * c12.J * c13.I * c21.J + c11.I * b1X * c12.J * c13.I * c21.J * c13.J + 6 * c11.I * c12.I * b1Y * c13.I * c21.J * c13.J + c11.I * b1Y * c21.I * c12.J * c13.I * c13.J - b1X * c11.J * c12.I * c13.I * c21.J * c13.J - 6 * b1X * c11.J * c21.I * c12.J * c13.I * c13.J - c11.J * c12.I * b1Y * c21.I * c13.I * c13.J - 6 * a1X * b1X * c21.I * c13y3 - 2 * a1X * c21.I * c12y3 * c13.I + 6 * a1Y * b1Y * c13x3 * c21.J + 2 * b1X * c21.I * c12y3 * c13.I + 2 * a1Y * c12x3 * c21.J * c13.J - 2 * c12x3 * b1Y * c21.J * c13.J - 6 * a1X * a1Y * c21.I * c13.I * c13y2 + 3 * a1X * c11.I * c12.I * c21.J * c13y2 - 2 * a1X * c11.I * c21.I * c12.J * c13y2 - 4 * a1X * c11.J * c12.I * c21.I * c13y2 + 3 * a1Y * c11.I * c12.I * c21.I * c13y2 + 6 * a1X * a1Y * c13x2 * c21.J * c13.J + 6 * a1X * b1X * c13.I * c21.J * c13y2 - 3 * a1X * c11.J * c12.J * c13x2 * c21.J + 2 * a1X * c12.I * c21.I * c12y2 * c13.J + 2 * a1X * c12.I * c12y2 * c13.I * c21.J + 6 * a1X * b1Y * c21.I * c13.I * c13y2 + 4 * a1Y * c11.I * c12.J * c13x2 * c21.J + 6 * a1Y * b1X * c21.I * c13.I * c13y2 + 2 * a1Y * c11.J * c12.I * c13x2 * c21.J - 3 * a1Y * c11.J * c21.I * c12.J * c13x2 + 2 * a1Y * c12.I * c21.I * c12y2 * c13.I - 3 * c11.I * b1X * c12.I * c21.J * c13y2 + 2 * c11.I * b1X * c21.I * c12.J * c13y2 + c11.I * c11.J * c21.I * c12y2 * c13.I - 3 * c11.I * c12.I * b1Y * c21.I * c13y2 + 4 * b1X * c11.J * c12.I * c21.I * c13y2 - 6 * a1X * b1Y * c13x2 * c21.J * c13.J - 2 * a1X * c12x2 * c12.J * c21.J * c13.J - 6 * a1Y * b1X * c13x2 * c21.J * c13.J - 6 * a1Y * b1Y * c21.I * c13x2 * c13.J - 2 * a1Y * c12x2 * c21.I * c12.J * c13.J - 2 * a1Y * c12x2 * c12.J * c13.I * c21.J - c11.I * c11.J * c12x2 * c21.J * c13.J - 4 * c11.I * b1Y * c12.J * c13x2 * c21.J - 2 * c11.I * c11y2 * c21.I * c13.I * c13.J + 3 * b1X * c11.J * c12.J * c13x2 * c21.J - 2 * b1X * c12.I * c21.I * c12y2 * c13.J - 2 * b1X * c12.I * c12y2 * c13.I * c21.J - 6 * b1X * b1Y * c21.I * c13.I * c13y2 - 2 * c11.J * c12.I * b1Y * c13x2 * c21.J + 3 * c11.J * b1Y * c21.I * c12.J * c13x2 - 2 * c12.I * b1Y * c21.I * c12y2 * c13.I - c11y2 * c12.I * c21.I * c12.J * c13.I + 6 * b1X * b1Y * c13x2 * c21.J * c13.J + 2 * b1X * c12x2 * c12.J * c21.J * c13.J + 2 * c11x2 * c11.J * c13.I * c21.J * c13.J + c11x2 * c12.I * c12.J * c21.J * c13.J + 2 * c12x2 * b1Y * c21.I * c12.J * c13.J + 2 * c12x2 * b1Y * c12.J * c13.I * c21.J + 3 * c10x2 * c21.I * c13y3 - 3 * c10y2 * c13x3 * c21.J + 3 * c20x2 * c21.I * c13y3 + c11y3 * c21.I * c13x2 - c11x3 * c21.J * c13y2 - 3 * c20y2 * c13x3 * c21.J - c11.I * c11y2 * c13x2 * c21.J + c11x2 * c11.J * c21.I * c13y2 - 3 * c10x2 * c13.I * c21.J * c13y2 + 3 * c10y2 * c21.I * c13x2 * c13.J - c11x2 * c12y2 * c13.I * c21.J + c11y2 * c12x2 * c21.I * c13.J - 3 * c20x2 * c13.I * c21.J * c13y2 + 3 * c20y2 * c21.I * c13x2 * c13.J,
                /* t^9 */ a1X * a1Y * c11.I * c12.J * c13.I * c13.J - a1X * a1Y * c11.J * c12.I * c13.I * c13.J + a1X * c11.I * c11.J * c12.I * c12.J * c13.J - a1Y * c11.I * c11.J * c12.I * c12.J * c13.I - a1X * c11.I * b1Y * c12.J * c13.I * c13.J + 6 * a1X * b1X * c11.J * c12.J * c13.I * c13.J + a1X * c11.J * c12.I * b1Y * c13.I * c13.J - a1Y * c11.I * b1X * c12.J * c13.I * c13.J - 6 * a1Y * c11.I * c12.I * b1Y * c13.I * c13.J + a1Y * b1X * c11.J * c12.I * c13.I * c13.J - c11.I * b1X * c11.J * c12.I * c12.J * c13.J + c11.I * c11.J * c12.I * b1Y * c12.J * c13.I + c11.I * b1X * b1Y * c12.J * c13.I * c13.J - b1X * c11.J * c12.I * b1Y * c13.I * c13.J - 2 * a1X * b1X * c12y3 * c13.I + 2 * a1Y * c12x3 * b1Y * c13.J - 3 * a1X * a1Y * c11.I * c12.I * c13y2 - 6 * a1X * a1Y * b1X * c13.I * c13y2 + 3 * a1X * a1Y * c11.J * c12.J * c13x2 - 2 * a1X * a1Y * c12.I * c12y2 * c13.I - 2 * a1X * c11.I * b1X * c12.J * c13y2 - a1X * c11.I * c11.J * c12y2 * c13.I + 3 * a1X * c11.I * c12.I * b1Y * c13y2 - 4 * a1X * b1X * c11.J * c12.I * c13y2 + 3 * a1Y * c11.I * b1X * c12.I * c13y2 + 6 * a1X * a1Y * b1Y * c13x2 * c13.J + 2 * a1X * a1Y * c12x2 * c12.J * c13.J + 2 * a1X * c11.I * c11y2 * c13.I * c13.J + 2 * a1X * b1X * c12.I * c12y2 * c13.J + 6 * a1X * b1X * b1Y * c13.I * c13y2 - 3 * a1X * c11.J * b1Y * c12.J * c13x2 + 2 * a1X * c12.I * b1Y * c12y2 * c13.I + a1X * c11y2 * c12.I * c12.J * c13.I + a1Y * c11.I * c11.J * c12x2 * c13.J + 4 * a1Y * c11.I * b1Y * c12.J * c13x2 - 3 * a1Y * b1X * c11.J * c12.J * c13x2 + 2 * a1Y * b1X * c12.I * c12y2 * c13.I + 2 * a1Y * c11.J * c12.I * b1Y * c13x2 + c11.I * b1X * c11.J * c12y2 * c13.I - 3 * c11.I * b1X * c12.I * b1Y * c13y2 - 2 * a1X * c12x2 * b1Y * c12.J * c13.J - 6 * a1Y * b1X * b1Y * c13x2 * c13.J - 2 * a1Y * b1X * c12x2 * c12.J * c13.J - 2 * a1Y * c11x2 * c11.J * c13.I * c13.J - a1Y * c11x2 * c12.I * c12.J * c13.J - 2 * a1Y * c12x2 * b1Y * c12.J * c13.I - 2 * c11.I * b1X * c11y2 * c13.I * c13.J - c11.I * c11.J * c12x2 * b1Y * c13.J + 3 * b1X * c11.J * b1Y * c12.J * c13x2 - 2 * b1X * c12.I * b1Y * c12y2 * c13.I - b1X * c11y2 * c12.I * c12.J * c13.I + 3 * c10y2 * c11.I * c12.I * c13.I * c13.J + 3 * c11.I * c12.I * c20y2 * c13.I * c13.J + 2 * b1X * c12x2 * b1Y * c12.J * c13.J - 3 * c10x2 * c11.J * c12.J * c13.I * c13.J + 2 * c11x2 * c11.J * b1Y * c13.I * c13.J + c11x2 * c12.I * b1Y * c12.J * c13.J - 3 * c20x2 * c11.J * c12.J * c13.I * c13.J - c10x3 * c13y3 + c10y3 * c13x3 + c20x3 * c13y3 - c20y3 * c13x3 - 3 * a1X * c20x2 * c13y3 - a1X * c11y3 * c13x2 + 3 * c10x2 * b1X * c13y3 + a1Y * c11x3 * c13y2 + 3 * a1Y * c20y2 * c13x3 + b1X * c11y3 * c13x2 + c10x2 * c12y3 * c13.I - 3 * c10y2 * b1Y * c13x3 - c10y2 * c12x3 * c13.J + c20x2 * c12y3 * c13.I - c11x3 * b1Y * c13y2 - c12x3 * c20y2 * c13.J - a1X * c11x2 * c11.J * c13y2 + a1Y * c11.I * c11y2 * c13x2 - 3 * a1X * c10y2 * c13x2 * c13.J - a1X * c11y2 * c12x2 * c13.J + a1Y * c11x2 * c12y2 * c13.I - c11.I * c11y2 * b1Y * c13x2 + 3 * c10x2 * a1Y * c13.I * c13y2 + c10x2 * c11.I * c12.J * c13y2 + 2 * c10x2 * c11.J * c12.I * c13y2 - 2 * c10y2 * c11.I * c12.J * c13x2 - c10y2 * c11.J * c12.I * c13x2 + c11x2 * b1X * c11.J * c13y2 - 3 * a1X * c20y2 * c13x2 * c13.J + 3 * a1Y * c20x2 * c13.I * c13y2 + c11.I * c20x2 * c12.J * c13y2 - 2 * c11.I * c20y2 * c12.J * c13x2 + b1X * c11y2 * c12x2 * c13.J - c11.J * c12.I * c20y2 * c13x2 - c10x2 * c12.I * c12y2 * c13.J - 3 * c10x2 * b1Y * c13.I * c13y2 + 3 * c10y2 * b1X * c13x2 * c13.J + c10y2 * c12x2 * c12.J * c13.I - c11x2 * b1Y * c12y2 * c13.I + 2 * c20x2 * c11.J * c12.I * c13y2 + 3 * b1X * c20y2 * c13x2 * c13.J - c20x2 * c12.I * c12y2 * c13.J - 3 * c20x2 * b1Y * c13.I * c13y2 + c12x2 * c20y2 * c12.J * c13.I
                );
            var roots = poly.RootsInInterval();

            foreach (var s in roots)
            {
                var point = new Point2D(c23.I * s * s * s + c22.I * s * s + c21.I * s + b1X, c23.J * s * s * s + c22.J * s * s + c21.J * s + b1Y);
                var xRoots = CubicRootsTests.CubicRootsKevinLinDev(
                    /* t^0 */ c13.I,
                    /* t^1 */ c12.I,
                    /* t^2 */ c11.I,
                    /* t^3 */ a1X - point.X,
                    epsilon);
                var yRoots = CubicRootsTests.CubicRootsKevinLinDev(
                    /* t^0 */ c13.J,
                    /* t^1 */ c12.J,
                    /* t^2 */ c11.J,
                    /* t^3 */ a1Y - point.Y,
                    epsilon);
                if (xRoots.Count > 0 && yRoots.Count > 0)
                {
                    // Find the nearest matching x and y roots in the ranges 0 < x < 1; 0 < y < 1.
                    foreach (var xRoot in xRoots)
                    {
                        if (0 <= xRoot && xRoot <= 1)
                        {
                            foreach (var yRoot in yRoots)
                            {
                                var t = xRoot - yRoot;
                                if ((t >= 0 ? t : -t) < epsilon)
                                {
                                    result.Points.Add(point);
                                    goto checkRoots; // Break through two levels of foreach loops. Using goto for performance.
                                }
                            }
                        }
                    }
                checkRoots:;
                }
            }

            if (result.Points.Count > 0)
            {
                result.State = IntersectionState.Intersection;
            }

            return result;
        }
    }
}
